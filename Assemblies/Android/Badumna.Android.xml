<?xml version='1.0' encoding='utf-8'?>
<doc>
  <assembly>
    <name>Badumna.Android</name>
  </assembly>
  <members>
    <member name="T:Badumna.ArbitrationModule">
      <summary>
            Configuration options for the arbitration system.
            </summary>
    </member>
    <member name="P:Badumna.ArbitrationModule.Servers">
      <summary>
            Gets the list of arbitration servers.  Defaults to an empty list.
            </summary>
    </member>
    <member name="T:Badumna.ArbitrationServerDetails">
      <summary>
            Identifies an arbitration server.
            </summary>
    </member>
    <member name="M:Badumna.ArbitrationServerDetails.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.ArbitrationServerDetails" /> class that
            identifies a server that will be located using distributed lookup.
            </summary>
      <param name="name">The name identifying the arbitration server.</param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is empty or <c>null</c>.</exception>
    </member>
    <member name="M:Badumna.ArbitrationServerDetails.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.ArbitrationServerDetails" /> class with
            a specific server address.
            </summary>
      <param name="name">The name identifying the arbitration server.</param>
      <param name="address">The server address, or <c>null</c> to indicate that distributed lookup should be used.</param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is empty or <c>null</c>.</exception>
    </member>
    <member name="P:Badumna.ArbitrationServerDetails.Address">
      <summary>
            Gets the address of the server.
            </summary>
    </member>
    <member name="P:Badumna.ArbitrationServerDetails.Name">
      <summary>
            Gets the name of the server.
            </summary>
    </member>
    <member name="M:Badumna.ArbitrationServerDetails.ToString">
      <summary>
            Returns a string representing the server details in the form <c>"name[;address]"</c>.  The
            address component is only present if an address is specified (i.e. it is not present
            if distributed lookup is used).
            </summary>
      <returns>A string representing the instance.</returns>
    </member>
    <member name="P:Badumna.ArbitrationServerDetails.UseDistributedLookup">
      <summary>
            Gets a value indicating whether distributed lookup will be used.
            </summary>
    </member>
    <member name="T:Badumna.ConnectivityModule">
      <summary>
            Configuration options for the connectivity system.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.ApplicationName">
      <summary>
            Gets or sets the name uniquely identifying the application.  Defaults to the empty string.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.BandwidthLimit">
      <summary>
            Gets or sets the bandwidth limit in bytes per second.  Defaults to <c>0</c>.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.BroadcastPort">
      <summary>
            Gets or sets the UDP port to be used for broadcast discovery of peers on the local network.
            Defaults to <c>39817</c>.
            </summary>
    </member>
    <member name="M:Badumna.ConnectivityModule.ConfigureForLan">
      <summary>
            Sets configuration options appropriate for use on a local area network.
            </summary>
    </member>
    <member name="M:Badumna.ConnectivityModule.ConfigureForSpecificPort(System.Int32)">
      <summary>
            Sets the port range properties so that a specific port is used.
            </summary>
      <param name="port">The port to use for Badumna traffic.</param>
    </member>
    <member name="M:Badumna.ConnectivityModule.DisableTransportLimiter">
      <summary>
            Disables the transport limiter.
            </summary>
    </member>
    <member name="M:Badumna.ConnectivityModule.EnableTransportLimiter(System.String)">
      <summary>
            Enables the transport limiter.
            </summary>
      <param name="testingOnlyAcknowledgement">Must contain the string <c>"i_understand_this_is_for_testing_only"</c>
            to indicate acknowledgement that this feature is not intended for use in production.</param>
    </member>
    <member name="P:Badumna.ConnectivityModule.EndPortRange">
      <summary>
            Gets or sets the end of the UDP port range to use for Badumna traffic.  Defaults to <c>21399</c>.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.IsBroadcastEnabled">
      <summary>
            Gets or sets a value indicating whether local network broadcast should be used to discover peers.
            Defaults to <c>true</c>.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.IsHostedService">
      <summary>
            Gets or sets a value indicating whether the current process is a hosted service, such as
            a seedpeer, overload server, or arbitration server.  Defaults to <c>false</c>.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.IsPortForwardingEnabled">
      <summary>
            Gets or sets a value indicating whether an attempt should be made to configure a port
            forwarding rule on the local router using a mechanism such as UPnP.  Defaults to <c>true</c>.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.IsTransportLimiterEnabled">
      <summary>
            Gets a value indicating whether the transport limiter is enabled.  Defaults to <c>false</c>.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.MaxPortsToTry">
      <summary>
            Gets or sets the maximum number of ports to try within the port range.  Defaults to <c>5</c>.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.SeedPeers">
      <summary>
            Gets the list of seed peer addresses.  Defaults to an empty list.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.StartPortRange">
      <summary>
            Gets or sets the start of the UDP port range to use for Badumna traffic.  Defaults to <c>21300</c>.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.StunServers">
      <summary>
            Gets the list of STUN servers.  Defaults to a list containing at least
            one STUN server.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.TunnelMode">
      <summary>
            Gets or sets an option indicating when a tunnelled connection should be used.
            Defaults to <see cref="F:Badumna.TunnelMode.Off" />.
            </summary>
    </member>
    <member name="P:Badumna.ConnectivityModule.TunnelUris">
      <summary>
            Gets the list of tunnel server URIs.  Defaults to an empty list.
            </summary>
    </member>
    <member name="T:Badumna.ConnectivityStatusDelegate">
      <summary>
            A delegate used to indicate if the network has changed status from offline and online.
            </summary>
    </member>
    <member name="T:Badumna.DhtStatus">
      <summary>
            The status of a DHT Tier.
            </summary>
    </member>
    <member name="P:Badumna.DhtStatus.IsInitialized">
      <summary>
            Gets a value indicating whether this tier has been initialized.
            </summary>
    </member>
    <member name="P:Badumna.DhtStatus.IsRouting">
      <summary>
            Gets a value indicating whether this tier is routing messages. The peer is 
            considered as fully connected to the P2P network when the Open tier is routing
            messages.
            </summary>
    </member>
    <member name="P:Badumna.DhtStatus.TierName">
      <summary>
            Gets the name of the tier.
            </summary>
    </member>
    <member name="M:Badumna.DhtStatus.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Badumna.DhtStatus.UniqueNeighbourCount">
      <summary>
            Gets the unique neighbour count.
            </summary>
    </member>
    <member name="T:Badumna.INetworkFacade">
      <summary>
            This interface defines the primary interface to Badumna.
            </summary>
    </member>
    <member name="E:Badumna.INetworkFacade.AddressChangedEvent">
      <summary>
            This event is called when the network address, port or the NAT type has changed.
            It is invoked on the application thread during the next call to <see cref="M:Badumna.INetworkFacade.ProcessNetworkState" />.
            </summary>
    </member>
    <member name="M:Badumna.INetworkFacade.AnnounceService(Badumna.ServiceDiscovery.ServerType)">
      <summary>
            Announces the service specified description. This method should only be called by hosted
            services such as on Overload/Arbitration servers. Game client should never call this method.
            </summary>
      <param name="type">The type of the service.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="P:Badumna.INetworkFacade.AveragePacketLossRate">
      <summary>
            Gets the average packet loss rate.
            </summary>
    </member>
    <member name="M:Badumna.INetworkFacade.BeginMatchmaking(Badumna.Matchmaking.HandleMatchmakingProgress,Badumna.Matchmaking.MatchmakingOptions)">
      <summary>
            Begin a matchmaking request.
            </summary>
      <param name="onProgress">The progress callback.</param>
      <param name="options">The matchmaking options.</param>
      <returns>
            Returns a MatchmakingAsyncResult object.
            </returns>
    </member>
    <member name="M:Badumna.INetworkFacade.BeginMatchmaking(Badumna.Matchmaking.HandleMatchmakingResult,Badumna.Matchmaking.HandleMatchmakingProgress,Badumna.Matchmaking.MatchmakingOptions)">
      <summary>
            Begin a matchmaking request.
            </summary>
      <param name="onCompletion">The completion callback.</param>
      <param name="onProgress">The progress callback.</param>
      <param name="options">The matchmaking options.</param>
      <returns>
            Returns a MatchmakingAsyncResult object.
            </returns>
    </member>
    <member name="M:Badumna.INetworkFacade.BeginMatchmaking(Badumna.Matchmaking.HandleMatchmakingResult,Badumna.Matchmaking.MatchmakingOptions)">
      <summary>
            Begin a matchmaking request.
            </summary>
      <param name="onCompletion">The completion callback.</param>
      <param name="options">The matchmaking options.</param>
      <returns>
            Returns a MatchmakingAsyncResult object.
            </returns>
    </member>
    <member name="M:Badumna.INetworkFacade.BeginMatchmaking(Badumna.Matchmaking.MatchmakingOptions)">
      <summary>
            Begin a matchmaking request.
            </summary>
      <param name="options">The matchmaking options.</param>
      <returns>
            Returns a MatchmakingAsyncResult object.
            </returns>
    </member>
    <member name="P:Badumna.INetworkFacade.Character">
      <summary>
            Gets the logged in character.
            </summary>
      <returns>The logged-in character, or null if there is no logged in character.</returns>
    </member>
    <member name="P:Badumna.INetworkFacade.ChatSession">
      <summary>
            Gets the chat session instance associated with the logged in character.
            </summary>
      <returns>The new chat session</returns>
    </member>
    <member name="M:Badumna.INetworkFacade.CreateAndStartTracker(System.String,System.Int32,System.TimeSpan,System.String)">
      <summary>
            A convenience method that creates a <see cref="T:Badumna.Utilities.StatisticsTracker" /> and
            starts it tracking.
            </summary>
      <param name="serverAddress">The address of the tracking server.</param>
      <param name="serverPort">The port on the tracking server.</param>
      <param name="interval">The interval between sending packets.</param>
      <param name="initialPayload">The initial payload data.</param>
      <returns>The <see cref="T:Badumna.Utilities.StatisticsTracker" /> instance which can be used
            to start and stop tracking, and to update the payload.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.INetworkFacade.CreateTracker(System.String,System.Int32,System.TimeSpan,System.String)">
      <summary>
            Creates a <see cref="T:Badumna.Utilities.StatisticsTracker" /> which periodically
            sends packets to a tracking server to estimate the number of current users on the
            network.
            </summary>
      <param name="serverAddress">The address of the tracking server.</param>
      <param name="serverPort">The port on the tracking server.</param>
      <param name="interval">The interval between sending packets.</param>
      <param name="initialPayload">The initial payload data.</param>
      <returns>The <see cref="T:Badumna.Utilities.StatisticsTracker" /> instance which can be used
            to start and stop tracking, and to update the payload.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.INetworkFacade.FlagForUpdate(Badumna.SpatialEntities.ISpatialOriginal,Badumna.Utilities.BooleanArray)">
      <summary>
            Indicates that the given entity has state changes that need to be propagated to interested peers.
            </summary>
      <param name="localEntity">The entity with changed state.</param>
      <param name="changedParts">A BooleanArray with bits set indicating which parts have changed.</param>
    </member>
    <member name="M:Badumna.INetworkFacade.FlagForUpdate(Badumna.SpatialEntities.ISpatialOriginal,System.Int32)">
      <summary>
            Indicates that the given entity has a state change that need to be propagated to interested peers.
            </summary>
      <param name="localEntity">The entity with changed state.</param>
      <param name="changedPartIndex">The index of the part of state that has changed.</param>
    </member>
    <member name="M:Badumna.INetworkFacade.GetArbitrator(System.String)">
      <summary>
            Get an <see cref="T:Badumna.Arbitration.IArbitrator" /> instance that can be used to send arbitration events to the
            aribtration server.  Used by arbitration clients.
            </summary>
      <param name="name">The name identifying the arbitration server.</param>
      <returns>The <see cref="T:Badumna.Arbitration.IArbitrator" /> instance</returns>
    </member>
    <member name="M:Badumna.INetworkFacade.GetBadumnaIdForArbitrationSession(System.Int32)">
      <summary>
            Gets a <see cref="T:Badumna.DataTypes.BadumnaId" /> identifying the peer associated with the given <paramref name="sessionId" />.
            This is only valid on an arbitration server peer (arbitration clients only have one arbitration session
            per arbitration server).  If the <paramref name="sessionId" /> is unknown this function returns <see cref="P:Badumna.DataTypes.BadumnaId.None" />.
            </summary>
      <param name="sessionId">The session id, as passed to the registered <see cref="T:Badumna.Arbitration.HandleClientMessage" /> delegate.</param>
      <returns>A <see cref="T:Badumna.DataTypes.BadumnaId" /> identifying the peer, or <see cref="P:Badumna.DataTypes.BadumnaId.None" /> if the session was not found.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.INetworkFacade.GetCharacterForArbitrationSession(System.Int32)">
      <summary>
            Gets the character associated with the given <paramref name="sessionId" />.  This is only valid on an
            arbitration server peer (arbitration clients only have one arbitration session
            per arbitration server).  If the <paramref name="sessionId" /> is unknown this function returns <c>null</c>.
            </summary>
      <param name="sessionId">The session id, as passed to the registered <see cref="T:Badumna.Arbitration.HandleClientMessage" /> delegate.</param>
      <returns>The character.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.INetworkFacade.GetDestination(Badumna.SpatialEntities.IDeadReckonable)">
      <summary>
            Returns the destination position for an <see cref="T:Badumna.SpatialEntities.IDeadReckonable" />.
            </summary>
      <param name="deadReckonable">The dead reckonable entity to query.</param>
      <returns>The current destination of the dead reckonable entity.</returns>
    </member>
    <member name="M:Badumna.INetworkFacade.GetNetworkStatus">
      <summary>
            Gets the current network status.
            </summary>
      <returns>The network status.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.INetworkFacade.GetUserIdForSession(System.Int32)">
      <summary>
            Gets the userId associated with the given <paramref name="sessionId" />.  This is only valid on an
            arbitration server peer (arbitration clients only have one arbitration session
            per arbitration server).  If the <paramref name="sessionId" /> is unknown this function returns <c>-1</c>.
            </summary>
      <param name="sessionId">The session id, as passed to the registered <see cref="T:Badumna.Arbitration.HandleClientMessage" /> delegate.</param>
      <returns>The user id.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="P:Badumna.INetworkFacade.InboundBytesPerSecond">
      <summary>
            Gets the estimated inbound bytes/second; the rate that we're receiving data from other peers.  This estimate
            does not include minor local traffic (such as local broadcast messages for discovery) or diagnostic traffic.
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.InitializationProgress">
      <summary>
            Gets the current state of the initialization process.  Initialization begins as soon as
            <see cref="M:Badumna.NetworkFacade.Create(System.String)" /> or <see cref="M:Badumna.NetworkFacade.Create(Badumna.Options)" /> is called.  Once initialization has completed this
            property will return <see cref="F:Badumna.InitializationState.Complete" />.  During initialization
            this property may transistion through other values of the <see cref="T:Badumna.InitializationState" />
            enumeration; see its documentation for details.
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.IsFullyConnected">
      <summary>
            Gets a value indicating whether the local peer is fully connected to the network.
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.IsLoggedIn">
      <summary>
            Gets a value indicating whether login has succeeded.
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.IsOffline">
      <summary>
            Gets a value indicating whether the network is unavailable or the facade has been shut down.
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.IsOnline">
      <summary>
            Gets a value indicating whether if the network is available and initialized.
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.IsTunnelled">
      <summary>
            Gets a value indicating whether the connection to the network is being tunnelled over HTTP.
            </summary>
    </member>
    <member name="M:Badumna.INetworkFacade.JoinMiniScene(System.String,Badumna.SpatialEntities.CreateSpatialReplica,Badumna.SpatialEntities.RemoveSpatialReplica)">
      <summary>
            Joins a mini scene.
            <para />
            A mini scene acts much like a regular scene, except that Badumna performs no interest management or position tracking,
            rather it assumes that all entities in a mini scene are close enough to receive updates for every other peer in the scene.
            <para />
            This reduces overhead for scenes that are small (in number of players or physical dimensions), but does not
            scale well for larger scenes, where Badumna's interest management saves on bandwidth and computation by only
            replicating to / from entities that are nearby.
            </summary>
      <param name="sceneName">The unique name identifying the scene.</param>
      <param name="createEntityDelegate">Called when a new entity needs to be instantiated into the scene</param>
      <param name="removeEntityDelegate">Called when an entity in the scene departs.</param>
      <returns>An instance of NetworkScene representing the mini scene.</returns>
    </member>
    <member name="M:Badumna.INetworkFacade.JoinScene(System.String,Badumna.SpatialEntities.CreateSpatialReplica,Badumna.SpatialEntities.RemoveSpatialReplica)">
      <summary>
            Joins a scene.
            </summary>
      <param name="sceneName">The unique name identifying the scene.</param>
      <param name="createEntityDelegate">Called when a new entity needs to be instantiated into the scene</param>
      <param name="removeEntityDelegate">Called when an entity in the scene departs.</param>
      <returns>An instance of NetworkScene representing the scene.</returns>
    </member>
    <member name="M:Badumna.INetworkFacade.Login">
      <summary>
            Performs login-time initializations, and indicates that no authorization system is being used.
            </summary>
      <returns>
        <c>true</c> if login was successful, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Badumna.INetworkFacade.Login(Badumna.Security.IIdentityProvider)">
      <summary>
            Logs in to the network, specifing a delegate that provider authorization tokens
            </summary>
      <param name="identityProvider">An implementation of an identity provider that will return any required authorization tokens.  
            Calls to the identity provider may be made from a different thread to that which called Login.  Tokens returned by the delegate
            become owned by the network library and should no longer be accessed.  The provider must be usable until Shutdown is called.
            </param>
      <returns>
        <c>true</c> if login was successful, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Badumna.INetworkFacade.Login(System.String)">
      <summary>
            Performs login-time initializations, and indicates that no authorization system is being used.
            </summary>
      <param name="characterName">The character name to login as.</param>
      <returns>
        <c>true</c> if login was successful, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Badumna.INetworkFacade.Login(System.String,System.String)">
      <summary>
            Performs login-time initializations, and indicates that no authorization system is being used.
            </summary>
      <param name="characterName">The character name to login as.</param>
      <param name="keyPairXml">A string containing xml for a key pair to be used for secure communication.</param>
      <returns>
        <c>true</c> if login was successful, <c>false</c> otherwise.</returns>
    </member>
    <member name="P:Badumna.INetworkFacade.Match">
      <summary>
            Gets the Match facade.
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.MaximumPacketLossRate">
      <summary>
            Gets the maximum packet loss rate.
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.MaximumSendLimitBytesPerSecond">
      <summary>
            Gets the maximum send limit on any given connection in bytes per second.
            </summary>
    </member>
    <member name="E:Badumna.INetworkFacade.OfflineEvent">
      <summary>
            This event is invoked when the network becomes unavailable. (Packets can not be sent)
            </summary>
    </member>
    <member name="E:Badumna.INetworkFacade.OnlineEvent">
      <summary>
            This event is called when the network becomes available. (Packets can be sent)
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.OutboundBytesPerSecond">
      <summary>
            Gets the estimated outbound bytes/second; the rate that we're sending data to other peers.  This estimate
            does not include minor local traffic (such as local broadcast messages for discovery) or diagnostic traffic.
            </summary>
    </member>
    <member name="M:Badumna.INetworkFacade.ProcessNetworkState">
      <summary>
            Performs any regular processing in Badumna that requires synchronisation with the application.
            </summary>
    </member>
    <member name="M:Badumna.INetworkFacade.RegisterArbitrationHandler(Badumna.Arbitration.HandleClientMessage,System.TimeSpan,Badumna.Arbitration.HandleClientDisconnect)">
      <summary>
            Registers the handler that will be called when this peer receives an arbitration event
            from another peer.  Used by the arbitration server.
            </summary>
      <param name="handler">The arbitration event handler.</param>
      <param name="disconnectTimeout">The amount of time with no received events before a client will disconnected.</param>
      <param name="disconnect">The client disconnection handler.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.INetworkFacade.RegisterEntityDetails(System.Single,System.Single)">
      <summary>
            Registers limitations on replicable entities so Badumna can come up with optimized setting for the game environment.
            Cannot be called after joining a scene.
            </summary>
      <param name="maxInterestRadius">The largest area of interest radius of any replicable entity (or entity radius if that is larger).</param>
      <param name="maxEntitySpeed">The maximum speed any replicable entity will move at.</param>
    </member>
    <member name="M:Badumna.INetworkFacade.RegisterEntityDetails(System.UInt32,System.Single,Badumna.DataTypes.Vector3)">
      <summary>
            Registers the entity details so Badumna can come up with optimized setting for the game environment.
            All entities should be registered by calling this method before JoinScene is called.
            </summary>
      <param name="entityType">An integer representing the type of the entity.</param>
      <param name="areaOfInterestRadius">The area of interest radius.</param>
      <param name="maxVelocity">The max velocity.</param>
    </member>
    <member name="E:Badumna.INetworkFacade.RequestShutdown">
      <summary>
            Indicates that the network layer requires the application to shutdown.
            </summary>
    </member>
    <member name="E:Badumna.INetworkFacade.RequestShutdownForUpdate">
      <summary>
            Indicates that an update is available and the application should restart to apply them.
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.RPCManager">
      <summary>
            Gets the RPC manager for making RPC calls to remote entities.
            </summary>
    </member>
    <member name="M:Badumna.INetworkFacade.SendCustomMessageToOriginal(Badumna.SpatialEntities.ISpatialReplica,System.IO.MemoryStream)">
      <summary>
            Sends a single message directly to the controlling instance of this entity.
            </summary>
      <param name="replica">The entity whose controlling instance should receive the event.</param>
      <param name="eventData">The event specific data to send.</param>
    </member>
    <member name="M:Badumna.INetworkFacade.SendCustomMessageToRemoteCopies(Badumna.SpatialEntities.ISpatialOriginal,System.IO.MemoryStream)">
      <summary>
            Sends a single message directly to all remote replicas of the specified entity.
            </summary>
      <param name="original">The entity whose replicas should receive the event.</param>
      <param name="eventData">The event specific data to send.</param>
    </member>
    <member name="M:Badumna.INetworkFacade.SendServerArbitrationEvent(System.Int32,System.Byte[])">
      <summary>
            Sends an event from the arbitration server to the client identified by <paramref name="destinationSessionId" />.
            This session id must already be known to the arbitration server (i.e. the client must always
            initiate any arbitration session).
            </summary>
      <param name="destinationSessionId">Identifies the session to send the event to.</param>
      <param name="message">The payload to send.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.INetworkFacade.Shutdown">
      <summary>
            Blocking shutdown.  This explicitly just calls Shutdown(true).
            </summary>
    </member>
    <member name="M:Badumna.INetworkFacade.Shutdown(System.Boolean)">
      <summary>
            Shuts down the facade.
            </summary>
      <param name="blockUntilComplete">If true, this method will not return until shutdown has completed.</param>
    </member>
    <member name="M:Badumna.INetworkFacade.SnapToDestination(Badumna.SpatialEntities.IDeadReckonable)">
      <summary>
            Forces the IDeadReckonable's position and velocity to the current destination
            values and begins extrapolation.
            </summary>
      <param name="deadReckonable">The dead reckonable entity.</param>
    </member>
    <member name="M:Badumna.INetworkFacade.StartController``1(System.String)">
      <summary>
            Start a controller of the given type on the network.
            The controller must have a constructor that takes a single string argument.
            </summary>
      <param name="controllerUniqueName">The unique name of the controller.</param>
      <typeparam name="T">The type of the controller. Must be derived from DistributedController.</typeparam>
      <exception cref="T:Badumna.Controllers.MissingConstructorException">Thrown when the given type does not have 
            a constructor that takes a single string argument</exception>
    </member>
    <member name="M:Badumna.INetworkFacade.StartController``1(System.String,System.String,System.UInt16)">
      <summary>
            Starts a controller of the given type on the network.
            </summary>
      <param name="sceneName">Name of the scene.</param>
      <param name="controllerName">Name of the controller.</param>
      <param name="max">The max number of controllers of this type on the network.</param>
      <typeparam name="T">The type of the controller. Must be derived from DistributedController.</typeparam>
      <returns>the unique name of the controller.</returns>
      <exception cref="T:Badumna.Controllers.MissingConstructorException">Thrown when the given type does not have
            a constructor that takes a single string argument</exception>
    </member>
    <member name="M:Badumna.INetworkFacade.StopController``1(System.String)">
      <summary>
            Stops the controller of the given type.
            </summary>
      <param name="controllerUniqueName">The unique name of the controller.</param>
      <typeparam name="T">The type of the controller. Must be derived from DistributedController</typeparam>
    </member>
    <member name="P:Badumna.INetworkFacade.Streaming">
      <summary>
            Gets the StreamingManager
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.TotalSendLimitBytesPerSecond">
      <summary>
            Gets the total send limit in bytes per second. 
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.TypeRegistry">
      <summary>
            Gets the serialization manager for registerting replicable types.
            </summary>
    </member>
    <member name="P:Badumna.INetworkFacade.ValidationFacade">
      <summary>
            Gets the validation manager.
            </summary>
    </member>
    <member name="T:Badumna.InitializationState">
      <summary>
            The state of the network facade initialization process.
            </summary>
    </member>
    <member name="F:Badumna.InitializationState.Uninitialized">
      <summary>
            The initialization has just started.
            </summary>
    </member>
    <member name="F:Badumna.InitializationState.Complete">
      <summary>
            The initialization process has completed.  Both successful and
            unsuccessful initialization end in this state.
            </summary>
    </member>
    <member name="T:Badumna.IValidationModule">
      <summary>
            Interface for validation module.
            </summary>
    </member>
    <member name="M:Badumna.IValidationModule.GetServerDetails(System.String)">
      <summary>
            Get the server details for a named service.
            </summary>
      <param name="name">The name of the validation service.</param>
      <returns>The validation server details.</returns>
    </member>
    <member name="M:Badumna.IValidationModule.HasServer(System.String)">
      <summary>
            Does the module specify a server with the given name.
            </summary>
      <param name="name">The name of the validation server to look for.</param>
      <returns>True if the modules specifies a server with the given name.</returns>
    </member>
    <member name="P:Badumna.IValidationModule.IsEnabled">
      <summary>
            Gets a value indicating whether the the validation module is enabled.
            </summary>
    </member>
    <member name="P:Badumna.IValidationModule.RequiresDistributedLookup">
      <summary>
            Gets a value indicating whether the distributed lookup service is required.
            </summary>
    </member>
    <member name="P:Badumna.IValidationModule.Servers">
      <summary>
            Gets a list of the servers (details) specified.
            </summary>
    </member>
    <member name="T:Badumna.LoggerModule">
      <summary>
            Configuration options for the logging system.
            </summary>
    </member>
    <member name="P:Badumna.LoggerModule.ExcludeTags">
      <summary>
            Gets or sets a value indicating which logging tags should be excluded from the log.
            Defaults to <see cref="F:Badumna.LogTag.None" />.
            </summary>
    </member>
    <member name="P:Badumna.LoggerModule.IncludeTags">
      <summary>
            Gets or sets a value indicating which logging tags should be included in the log.
            Defaults to <see cref="F:Badumna.LogTag.All" />.
            </summary>
    </member>
    <member name="P:Badumna.LoggerModule.IsAssertUiSuppressed">
      <summary>
            Gets or sets a value indicating whether .NET's assert dialogs should be suppressed.
            Defaults to <c>false</c>.
            </summary>
    </member>
    <member name="P:Badumna.LoggerModule.IsDotNetTraceForwardingEnabled">
      <summary>
            Gets or sets a value indicating whether the messages sent to the .NET Trace system
            should be forwarded to Badumna's logging system.  Defaults to <c>false</c>.
            </summary>
    </member>
    <member name="P:Badumna.LoggerModule.LoggerConfig">
      <summary>
            Gets or sets a value containing configuration options specific to the logger type
            in use.  Defaults to <c>null</c>.
            </summary>
    </member>
    <member name="P:Badumna.LoggerModule.LoggerType">
      <summary>
            Gets or sets a value indicating the type of logging system to use.  Defaults to
            <see cref="F:Badumna.LoggerType.DotNetTrace" />.
            </summary>
    </member>
    <member name="P:Badumna.LoggerModule.LogLevel">
      <summary>
            Gets or sets a value indicating the minimum severity for messages to be logged.
            Defaults to <see cref="F:Badumna.LogLevel.Warning" />.
            </summary>
    </member>
    <member name="P:Badumna.LoggerModule.LogTimestamp">
      <summary>
            Gets or sets a value indicating whether to add a timestamp to the logged messages.
            Defaults to <c>false</c>.
            </summary>
    </member>
    <member name="T:Badumna.LoggerType">
      <summary>
            Identifies the different types of logging systems.
            </summary>
    </member>
    <member name="F:Badumna.LoggerType.None">
      <summary>
            No logging system.
            </summary>
    </member>
    <member name="F:Badumna.LoggerType.DotNetTrace">
      <summary>
            Logging using the .NET Framework's Trace system.
            </summary>
    </member>
    <member name="F:Badumna.LoggerType.UnityTrace">
      <summary>
            Logging using Unity's Trace system.
            </summary>
    </member>
    <member name="F:Badumna.LoggerType.Log4Net">
      <summary>
            Logging using Log4Net.
            </summary>
    </member>
    <member name="F:Badumna.LoggerType.Android">
      <summary>
            Logging using Android's internal log system, Util.Log
            </summary>
    </member>
    <member name="F:Badumna.LoggerType.Console">
      <summary>
            Logging using the console.
            </summary>
    </member>
    <member name="F:Badumna.LoggerType.File">
      <summary>
            Logging to a file.
            </summary>
    </member>
    <member name="T:Badumna.LogLevel">
      <summary>
            Identifies the class of log messages.
            </summary>
    </member>
    <member name="F:Badumna.LogLevel.Information">
      <summary>
            Informational messages, describing normal progress of the system.
            </summary>
    </member>
    <member name="F:Badumna.LogLevel.Warning">
      <summary>
            Warning messages, indicating an potential problem.
            </summary>
    </member>
    <member name="F:Badumna.LogLevel.Error">
      <summary>
            Error messages, indicating a serious problem.
            </summary>
    </member>
    <member name="T:Badumna.LogTag">
      <summary>
            A set of tags that can be applied to a log message to allow for easy filtering.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.None">
      <summary>
            No tags (for use as a filter).
            </summary>
    </member>
    <member name="F:Badumna.LogTag.OldStyle">
      <summary>
            Indicates old logging calls that have not yet been updated with specific tags.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Event">
      <summary>
            Messages that indicate an event has occurred (as distinct from Periodic).
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Periodic">
      <summary>
            Messages that are logged periodically (as distinct from Event).
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Connection">
      <summary>
            Messages related to Badumna.Transport.Connections.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Entity">
      <summary>
            Messages related to replicated entities.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Transport">
      <summary>
            Messages related to the transport system.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Overload">
      <summary>
            Messages related to the overload system.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.RemoteCall">
      <summary>
            Messages related to the remote method call system itself (not instances of remote calls, but the system for sending them over the network).
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Chat">
      <summary>
            Messages related to the chat system.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Presence">
      <summary>
            Messages related to the chat / user presence system.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.InterestManagement">
      <summary>
            Messages related to Interest Management.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.State">
      <summary>
            Messages describing internal state.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Routing">
      <summary>
            Messages related to DHT message routing.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Crypto">
      <summary>
            Messages related to cryptography.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Wrapped">
      <summary>
            Messages routed from other sources (e.g the host platform's default logging system).
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Replication">
      <summary>
            Messages relating to entity replication.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Arbitration">
      <summary>
            Messages relating to Arbitration.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Autoreplication">
      <summary>
            Messages relating to autoreplication.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Match">
      <summary>
            Messages relating to the match system.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.DHT">
      <summary>
            Messages relating to the DHT.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Validation">
      <summary>
            Messages relating to distributed validation.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Core">
      <summary>
            Messages relating to classe in the Badumna.Core namespace.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Security">
      <summary>
            Messages relating to security.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Facade">
      <summary>
            Messages relating to the network facade.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.SpatialEntities">
      <summary>
            Messages relating to spatial entities.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Configuration">
      <summary>
            Messages relating to configuration.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.DistributedController">
      <summary>
            Messages relating to distributed validation.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Multicast">
      <summary>
            Messages relating to multicast.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.ServiceDiscovery">
      <summary>
            Messages relating to service discovery.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Streaming">
      <summary>
            Messages relating to streaming.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Utilities">
      <summary>
            Messages relating to utilities.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.ProtocolMethod">
      <summary>
            Messages logging the invocation (receipt) of a protocol method.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.SendProtocolMethod">
      <summary>
            Messages logging the remote call (sending) of a protocol method.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Dei">
      <summary>
            Messages relating to Dei.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Tests">
      <summary>
            Messages relating to tests.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.Simulator">
      <summary>
            Messages relating to the simulator.
            </summary>
    </member>
    <member name="F:Badumna.LogTag.All">
      <summary>
            All tags (for use as a filter).
            </summary>
    </member>
    <member name="T:Badumna.MatchmakingModule">
      <summary>
            Configuration options for the matchmaking system.
            </summary>
    </member>
    <member name="P:Badumna.MatchmakingModule.ActiveMatchLimit">
      <summary>
            Gets or sets the maximum number of active matches allowed on the matchmaking server.
            </summary>
    </member>
    <member name="P:Badumna.MatchmakingModule.ServerAddress">
      <summary>
            Gets or sets the address of the matchmaking server.
            </summary>
    </member>
    <member name="T:Badumna.NetworkFacade">
      <summary>
            The network engine.
            </summary>
    </member>
    <member name="E:Badumna.NetworkFacade.AddressChangedEvent">
      <summary>
            This event is called when the network address, port or the NAT type has changed.
            It is invoked on the application thread during the next call to <see cref="M:Badumna.INetworkFacade.ProcessNetworkState" />.
            </summary>
    </member>
    <member name="M:Badumna.NetworkFacade.AnnounceService(Badumna.ServiceDiscovery.ServerType)">
      <summary>
            Announces the service specified description. This method should only be called by hosted
            services such as on Overload/Arbitration servers. Game client should never call this method.
            </summary>
      <param name="type">The type of the service.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="P:Badumna.NetworkFacade.AveragePacketLossRate">
      <summary>
            Gets the average packet loss rate.
            </summary>
    </member>
    <member name="M:Badumna.NetworkFacade.BeginCreate(Badumna.Options,System.AsyncCallback)">
      <summary>
            Begin the asyncronously intialization of Badumna.
            </summary>
      <param name="options">Badumna configuration options.</param>
      <param name="callback">A callback that will be invoked when initialization is complete.</param>
      <returns>A result object.</returns>
    </member>
    <member name="M:Badumna.NetworkFacade.BeginCreate(System.String,System.AsyncCallback)">
      <summary>
            Begin the asyncronously intialization of BadumnaCloud.
            </summary>
      <param name="id">Your Badumna Cloud application ID.</param>
      <param name="callback">A callback that will be invoked when initialization is complete.</param>
      <returns>A result object.</returns>
    </member>
    <member name="M:Badumna.NetworkFacade.BeginMatchmaking(Badumna.Matchmaking.HandleMatchmakingProgress,Badumna.Matchmaking.MatchmakingOptions)">
      <summary>
            Begin a matchmaking request.
            </summary>
      <param name="onProgress">The progress callback.</param>
      <param name="options">The matchmaking options.</param>
      <returns>
            Returns a MatchmakingAsyncResult object.
            </returns>
    </member>
    <member name="M:Badumna.NetworkFacade.BeginMatchmaking(Badumna.Matchmaking.HandleMatchmakingResult,Badumna.Matchmaking.HandleMatchmakingProgress,Badumna.Matchmaking.MatchmakingOptions)">
      <summary>
            Begin a matchmaking request.
            </summary>
      <param name="onCompletion">The completion callback.</param>
      <param name="onProgress">The progress callback.</param>
      <param name="options">The matchmaking options.</param>
      <returns>
            Returns a MatchmakingAsyncResult object.
            </returns>
    </member>
    <member name="M:Badumna.NetworkFacade.BeginMatchmaking(Badumna.Matchmaking.HandleMatchmakingResult,Badumna.Matchmaking.MatchmakingOptions)">
      <summary>
            Begin a matchmaking request.
            </summary>
      <param name="onCompletion">The completion callback.</param>
      <param name="options">The matchmaking options.</param>
      <returns>
            Returns a MatchmakingAsyncResult object.
            </returns>
    </member>
    <member name="M:Badumna.NetworkFacade.BeginMatchmaking(Badumna.Matchmaking.MatchmakingOptions)">
      <summary>
            Begin a matchmaking request.
            </summary>
      <param name="options">The matchmaking options.</param>
      <returns>
            Returns a MatchmakingAsyncResult object.
            </returns>
    </member>
    <member name="P:Badumna.NetworkFacade.Character">
      <summary>
            Gets the logged in character.
            </summary>
      <returns>The logged-in character, or null if there is no logged in character.</returns>
    </member>
    <member name="P:Badumna.NetworkFacade.ChatSession">
      <summary>
            Gets the chat session instance associated with the logged in character.
            </summary>
      <returns>The new chat session</returns>
    </member>
    <member name="M:Badumna.NetworkFacade.Create(Badumna.Options)">
      <summary>
            Creates a NetworkFacade using the given options.
            </summary>
      <param name="options">The options used to configure the new network facade.</param>
      <returns>The new NetworkFacade instance.</returns>
      <exception cref="T:Badumna.Core.ConnectivityException">If the public address of the machine cannot be determined.</exception>
    </member>
    <member name="M:Badumna.NetworkFacade.Create(System.String)">
      <summary>
            Creates a NetworkFacade configured for the given cloud identifier.
            </summary>
      <param name="identifier">The identifier of the cloud network to connect to.</param>
      <returns>The new NetworkFacade instance.</returns>
      <exception cref="T:Badumna.Core.ConfigurationException">Cloud configuration could not be retrieved (see inner exception for details).</exception>
      <exception cref="T:Badumna.Core.ConnectivityException">If the public address of the machine cannot be determined.</exception>
    </member>
    <member name="M:Badumna.NetworkFacade.CreateAndStartTracker(System.String,System.Int32,System.TimeSpan,System.String)">
      <summary>
            A convenience method that creates a <see cref="T:Badumna.Utilities.StatisticsTracker" /> and
            starts it tracking.
            </summary>
      <param name="serverAddress">The address of the tracking server.</param>
      <param name="serverPort">The port on the tracking server.</param>
      <param name="interval">The interval between sending packets.</param>
      <param name="initialPayload">The initial payload data.</param>
      <returns>The <see cref="T:Badumna.Utilities.StatisticsTracker" /> instance which can be used
            to start and stop tracking, and to update the payload.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.NetworkFacade.CreateChatSession" />
    <member name="M:Badumna.NetworkFacade.CreateTracker(System.String,System.Int32,System.TimeSpan,System.String)">
      <summary>
            Creates a <see cref="T:Badumna.Utilities.StatisticsTracker" /> which periodically
            sends packets to a tracking server to estimate the number of current users on the
            network.
            </summary>
      <param name="serverAddress">The address of the tracking server.</param>
      <param name="serverPort">The port on the tracking server.</param>
      <param name="interval">The interval between sending packets.</param>
      <param name="initialPayload">The initial payload data.</param>
      <returns>The <see cref="T:Badumna.Utilities.StatisticsTracker" /> instance which can be used
            to start and stop tracking, and to update the payload.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.NetworkFacade.EndCreate(System.IAsyncResult)">
      <summary>
            Retrieve the network facade after asynchronous BadumnaCloud initialization.
            </summary>
      <param name="result">The result of the initialization.</param>
      <returns>A new Badumna network facade.</returns>
      <exception cref="T:Badumna.Core.ConnectivityException">If the public address of the machine cannot be determined.</exception>
      <exception cref="T:Badumna.Core.ConfigurationException">If the configuration was invalid or if in cloud mode and the configuration could not be retrieved (see inner exception for details).</exception>
    </member>
    <member name="M:Badumna.NetworkFacade.FlagForUpdate(Badumna.SpatialEntities.ISpatialOriginal,Badumna.Utilities.BooleanArray)">
      <summary>
            Indicates that the given entity has state changes that need to be propagated to interested peers.
            </summary>
      <param name="localEntity">The entity with changed state.</param>
      <param name="changedParts">A BooleanArray with bits set indicating which parts have changed.</param>
    </member>
    <member name="M:Badumna.NetworkFacade.FlagForUpdate(Badumna.SpatialEntities.ISpatialOriginal,System.Int32)">
      <summary>
            Indicates that the given entity has a state change that need to be propagated to interested peers.
            </summary>
      <param name="localEntity">The entity with changed state.</param>
      <param name="changedPartIndex">The index of the part of state that has changed.</param>
    </member>
    <member name="M:Badumna.NetworkFacade.FlagFullUpdate(Badumna.SpatialEntities.ISpatialEntity)" />
    <member name="M:Badumna.NetworkFacade.GetArbitrator(System.String)">
      <summary>
            Get an <see cref="T:Badumna.Arbitration.IArbitrator" /> instance that can be used to send arbitration events to the
            aribtration server.  Used by arbitration clients.
            </summary>
      <param name="name">The name identifying the arbitration server.</param>
      <returns>The <see cref="T:Badumna.Arbitration.IArbitrator" /> instance</returns>
    </member>
    <member name="M:Badumna.NetworkFacade.GetBadumnaIdForArbitrationSession(System.Int32)">
      <summary>
            Gets a <see cref="T:Badumna.DataTypes.BadumnaId" /> identifying the peer associated with the given <paramref name="sessionId" />.
            This is only valid on an arbitration server peer (arbitration clients only have one arbitration session
            per arbitration server).  If the <paramref name="sessionId" /> is unknown this function returns <see cref="P:Badumna.DataTypes.BadumnaId.None" />.
            </summary>
      <param name="sessionId">The session id, as passed to the registered <see cref="T:Badumna.Arbitration.HandleClientMessage" /> delegate.</param>
      <returns>A <see cref="T:Badumna.DataTypes.BadumnaId" /> identifying the peer, or <see cref="P:Badumna.DataTypes.BadumnaId.None" /> if the session was not found.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.NetworkFacade.GetCharacterForArbitrationSession(System.Int32)">
      <summary>
            Gets the character associated with the given <paramref name="sessionId" />.  This is only valid on an
            arbitration server peer (arbitration clients only have one arbitration session
            per arbitration server).  If the <paramref name="sessionId" /> is unknown this function returns <c>null</c>.
            </summary>
      <param name="sessionId">The session id, as passed to the registered <see cref="T:Badumna.Arbitration.HandleClientMessage" /> delegate.</param>
      <returns>The character.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.NetworkFacade.GetDestination(Badumna.SpatialEntities.IDeadReckonable)">
      <summary>
            Returns the destination position for an <see cref="T:Badumna.SpatialEntities.IDeadReckonable" />.
            </summary>
      <param name="deadReckonable">The dead reckonable entity to query.</param>
      <returns>The current destination of the dead reckonable entity.</returns>
    </member>
    <member name="M:Badumna.NetworkFacade.GetNetworkStatus">
      <summary>
            Gets the current network status.
            </summary>
      <returns>The network status.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.NetworkFacade.GetUserIdForSession(System.Int32)">
      <summary>
            Gets the userId associated with the given <paramref name="sessionId" />.  This is only valid on an
            arbitration server peer (arbitration clients only have one arbitration session
            per arbitration server).  If the <paramref name="sessionId" /> is unknown this function returns <c>-1</c>.
            </summary>
      <param name="sessionId">The session id, as passed to the registered <see cref="T:Badumna.Arbitration.HandleClientMessage" /> delegate.</param>
      <returns>The user id.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="P:Badumna.NetworkFacade.InboundBytesPerSecond">
      <summary>
            Gets the estimated inbound bytes/second; the rate that we're receiving data from other peers.  This estimate
            does not include minor local traffic (such as local broadcast messages for discovery) or diagnostic traffic.
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.InitializationProgress">
      <summary>
            Gets the current state of the initialization process.  Initialization begins as soon as
            <see cref="M:Badumna.NetworkFacade.Create(System.String)" /> or <see cref="M:Badumna.NetworkFacade.Create(Badumna.Options)" /> is called.  Once initialization has completed this
            property will return <see cref="F:Badumna.InitializationState.Complete" />.  During initialization
            this property may transistion through other values of the <see cref="T:Badumna.InitializationState" />
            enumeration; see its documentation for details.
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.IsFullyConnected">
      <summary>
            Gets a value indicating whether the local peer is fully connected to the network.
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.IsLoggedIn">
      <summary>
            Gets a value indicating whether login has succeeded.
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.IsOffline">
      <summary>
            Gets a value indicating whether the network is unavailable or the facade has been shut down.
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.IsOnline">
      <summary>
            Gets a value indicating whether if the network is available and initialized.
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.IsTunnelled">
      <summary>
            Gets a value indicating whether the connection to the network is being tunnelled over HTTP.
            </summary>
    </member>
    <member name="M:Badumna.NetworkFacade.JoinMiniScene(System.String,Badumna.SpatialEntities.CreateSpatialReplica,Badumna.SpatialEntities.RemoveSpatialReplica)">
      <summary>
            Joins a mini scene.
            <para />
            A mini scene acts much like a regular scene, except that Badumna performs no interest management or position tracking,
            rather it assumes that all entities in a mini scene are close enough to receive updates for every other peer in the scene.
            <para />
            This reduces overhead for scenes that are small (in number of players or physical dimensions), but does not
            scale well for larger scenes, where Badumna's interest management saves on bandwidth and computation by only
            replicating to / from entities that are nearby.
            </summary>
      <param name="sceneName">The unique name identifying the scene.</param>
      <param name="createEntityDelegate">Called when a new entity needs to be instantiated into the scene</param>
      <param name="removeEntityDelegate">Called when an entity in the scene departs.</param>
      <returns>An instance of NetworkScene representing the mini scene.</returns>
    </member>
    <member name="M:Badumna.NetworkFacade.JoinScene(System.String,Badumna.SpatialEntities.CreateSpatialReplica,Badumna.SpatialEntities.RemoveSpatialReplica)">
      <summary>
            Joins a scene.
            </summary>
      <param name="sceneName">The unique name identifying the scene.</param>
      <param name="createEntityDelegate">Called when a new entity needs to be instantiated into the scene</param>
      <param name="removeEntityDelegate">Called when an entity in the scene departs.</param>
      <returns>An instance of NetworkScene representing the scene.</returns>
    </member>
    <member name="M:Badumna.NetworkFacade.Login">
      <summary>
            Performs login-time initializations, and indicates that no authorization system is being used.
            </summary>
      <returns>
        <c>true</c> if login was successful, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Badumna.NetworkFacade.Login(Badumna.Security.IIdentityProvider)">
      <summary>
            Logs in to the network, specifing a delegate that provider authorization tokens
            </summary>
      <param name="identityProvider">An implementation of an identity provider that will return any required authorization tokens.  
            Calls to the identity provider may be made from a different thread to that which called Login.  Tokens returned by the delegate
            become owned by the network library and should no longer be accessed.  The provider must be usable until Shutdown is called.
            </param>
      <returns>
        <c>true</c> if login was successful, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Badumna.NetworkFacade.Login(System.String)">
      <summary>
            Performs login-time initializations, and indicates that no authorization system is being used.
            </summary>
      <param name="characterName">The character name to login as.</param>
      <returns>
        <c>true</c> if login was successful, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Badumna.NetworkFacade.Login(System.String,System.String)">
      <summary>
            Performs login-time initializations, and indicates that no authorization system is being used.
            </summary>
      <param name="characterName">The character name to login as.</param>
      <param name="keyPairXml">A string containing xml for a key pair to be used for secure communication.</param>
      <returns>
        <c>true</c> if login was successful, <c>false</c> otherwise.</returns>
    </member>
    <member name="P:Badumna.NetworkFacade.Match">
      <summary>
            Gets the Match facade.
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.MaximumPacketLossRate">
      <summary>
            Gets the maximum packet loss rate.
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.MaximumSendLimitBytesPerSecond">
      <summary>
            Gets the maximum send limit on any given connection in bytes per second.
            </summary>
    </member>
    <member name="E:Badumna.NetworkFacade.OfflineEvent">
      <summary>
            This event is invoked when the network becomes unavailable. (Packets can not be sent)
            </summary>
    </member>
    <member name="E:Badumna.NetworkFacade.OnlineEvent">
      <summary>
            This event is called when the network becomes available. (Packets can be sent)
            </summary>
    </member>
    <member name="F:Badumna.NetworkFacade.options">
      <summary>
            Configuration options for the system.
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.OutboundBytesPerSecond">
      <summary>
            Gets the estimated outbound bytes/second; the rate that we're sending data to other peers.  This estimate
            does not include minor local traffic (such as local broadcast messages for discovery) or diagnostic traffic.
            </summary>
    </member>
    <member name="M:Badumna.NetworkFacade.ProcessNetworkState">
      <summary>
            Performs any regular processing in Badumna that requires synchronisation with the application.
            </summary>
    </member>
    <member name="M:Badumna.NetworkFacade.RegisterArbitrationHandler(Badumna.Arbitration.HandleClientMessage,System.TimeSpan,Badumna.Arbitration.HandleClientDisconnect)">
      <summary>
            Registers the handler that will be called when this peer receives an arbitration event
            from another peer.  Used by the arbitration server.
            </summary>
      <param name="handler">The arbitration event handler.</param>
      <param name="disconnectTimeout">The amount of time with no received events before a client will disconnected.</param>
      <param name="disconnect">The client disconnection handler.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.NetworkFacade.RegisterEntityDetails(System.Single,System.Single)">
      <summary>
            Registers limitations on replicable entities so Badumna can come up with optimized setting for the game environment.
            Cannot be called after joining a scene.
            </summary>
      <param name="maxInterestRadius">The largest area of interest radius of any replicable entity (or entity radius if that is larger).</param>
      <param name="maxEntitySpeed">The maximum speed any replicable entity will move at.</param>
    </member>
    <member name="M:Badumna.NetworkFacade.RegisterEntityDetails(System.UInt32,System.Single,Badumna.DataTypes.Vector3)">
      <summary>
            Registers the entity details so Badumna can come up with optimized setting for the game environment.
            All entities should be registered by calling this method before JoinScene is called.
            </summary>
      <param name="entityType">An integer representing the type of the entity.</param>
      <param name="areaOfInterestRadius">The area of interest radius.</param>
      <param name="maxVelocity">The max velocity.</param>
    </member>
    <member name="E:Badumna.NetworkFacade.RequestShutdown">
      <summary>
            Indicates that the network layer requires the application to shutdown.
            </summary>
    </member>
    <member name="E:Badumna.NetworkFacade.RequestShutdownForUpdate">
      <summary>
            Indicates that an update is available and the application should restart to apply them.
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.RPCManager">
      <summary>
            Gets the RPC manager for making RPC calls to remote entities.
            </summary>
    </member>
    <member name="M:Badumna.NetworkFacade.SendCustomMessageToOriginal(Badumna.SpatialEntities.ISpatialReplica,System.IO.MemoryStream)">
      <summary>
            Sends a single message directly to the controlling instance of this entity.
            </summary>
      <param name="replica">The entity whose controlling instance should receive the event.</param>
      <param name="eventData">The event specific data to send.</param>
    </member>
    <member name="M:Badumna.NetworkFacade.SendCustomMessageToRemoteCopies(Badumna.SpatialEntities.ISpatialOriginal,System.IO.MemoryStream)">
      <summary>
            Sends a single message directly to all remote replicas of the specified entity.
            </summary>
      <param name="original">The entity whose replicas should receive the event.</param>
      <param name="eventData">The event specific data to send.</param>
    </member>
    <member name="M:Badumna.NetworkFacade.SendServerArbitrationEvent(System.Int32,System.Byte[])">
      <summary>
            Sends an event from the arbitration server to the client identified by <paramref name="destinationSessionId" />.
            This session id must already be known to the arbitration server (i.e. the client must always
            initiate any arbitration session).
            </summary>
      <param name="destinationSessionId">Identifies the session to send the event to.</param>
      <param name="message">The payload to send.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported on a tunnelled connection.</exception>
    </member>
    <member name="M:Badumna.NetworkFacade.Shutdown">
      <summary>
            Blocking shutdown.  This explicitly just calls Shutdown(true).
            </summary>
    </member>
    <member name="M:Badumna.NetworkFacade.Shutdown(System.Boolean)">
      <summary>
            Shuts down the facade.
            </summary>
      <param name="blockUntilComplete">If true, this method will not return until shutdown has completed.</param>
    </member>
    <member name="M:Badumna.NetworkFacade.SnapToDestination(Badumna.SpatialEntities.IDeadReckonable)">
      <summary>
            Forces the IDeadReckonable's position and velocity to the current destination
            values and begins extrapolation.
            </summary>
      <param name="deadReckonable">The dead reckonable entity.</param>
    </member>
    <member name="M:Badumna.NetworkFacade.StartController``1(System.String)">
      <summary>
            Start a controller of the given type on the network.
            The controller must have a constructor that takes a single string argument.
            </summary>
      <param name="controllerUniqueName">The unique name of the controller.</param>
      <typeparam name="T">The type of the controller. Must be derived from DistributedController.</typeparam>
      <exception cref="T:Badumna.Controllers.MissingConstructorException">Thrown when the given type does not have 
            a constructor that takes a single string argument</exception>
    </member>
    <member name="M:Badumna.NetworkFacade.StartController``1(System.String,System.String,System.UInt16)">
      <summary>
            Starts a controller of the given type on the network.
            </summary>
      <param name="sceneName">Name of the scene.</param>
      <param name="controllerName">Name of the controller.</param>
      <param name="max">The max number of controllers of this type on the network.</param>
      <typeparam name="T">The type of the controller. Must be derived from DistributedController.</typeparam>
      <returns>the unique name of the controller.</returns>
      <exception cref="T:Badumna.Controllers.MissingConstructorException">Thrown when the given type does not have
            a constructor that takes a single string argument</exception>
    </member>
    <member name="M:Badumna.NetworkFacade.StopController``1(System.String)">
      <summary>
            Stops the controller of the given type.
            </summary>
      <param name="controllerUniqueName">The unique name of the controller.</param>
      <typeparam name="T">The type of the controller. Must be derived from DistributedController</typeparam>
    </member>
    <member name="P:Badumna.NetworkFacade.Streaming">
      <summary>
            Gets the StreamingManager
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.TotalSendLimitBytesPerSecond">
      <summary>
            Gets the total send limit in bytes per second. 
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.TypeRegistry">
      <summary>
            Gets the serialization manager for registerting replicable types.
            </summary>
    </member>
    <member name="P:Badumna.NetworkFacade.ValidationFacade">
      <summary>
            Gets the validation manager.
            </summary>
    </member>
    <member name="T:Badumna.NetworkFacadeFactory">
      <summary>
            A delegate signature for a factory method that creates a network facade.
            </summary>
      <param name="options">Configuration options.</param>
      <returns>A new network facade.</returns>
    </member>
    <member name="T:Badumna.NetworkStatus">
      <summary>
            Provides information about the state of Badumna's network connectivity.
            </summary>
    </member>
    <member name="M:Badumna.NetworkStatus.#ctor(Badumna.NetworkStatus)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.NetworkStatus" /> class.
            </summary>
      <param name="other">The other network status.</param>
    </member>
    <member name="P:Badumna.NetworkStatus.ActiveConnectionCount">
      <summary>
            Gets the number of established connections count.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.CurrentScenes">
      <summary>
            Gets the names of the current scenes the local peer has joined.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.DiscoveryMethod">
      <summary>
            Gets the discovery method.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.InitializingConnectionCount">
      <summary>
            Gets the initializing connection count.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.LastDiscoveryResultCount">
      <summary>
            Gets the last discovery result count.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.LastDiscoveryStatus">
      <summary>
            Gets the last discovery status.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.LastDiscoveryTime">
      <summary>
            Gets the last discovery time.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.LocalObjectCount">
      <summary>
            Gets the number of registered local entities.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.PortForwardingEnabled">
      <summary>
            Gets a value indicating whether port forwarding is enabled.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.PortForwardingSucceeded">
      <summary>
            Gets a value indicating whether port forwarding succeeded.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.PrivateAddress">
      <summary>
            Gets the private address.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.PublicAddress">
      <summary>
            Gets the public address.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.RemoteObjectCount">
      <summary>
            Gets the number of replicas.
            </summary>
    </member>
    <member name="M:Badumna.NetworkStatus.ToString">
      <summary>
            Returns a detailed human readable description of the network status.
            </summary>
      <returns>A string containing the network status description.</returns>
    </member>
    <member name="P:Badumna.NetworkStatus.TotalBytesReceivedPerSecond">
      <summary>
            Gets the total bytes received per second.
            </summary>
    </member>
    <member name="P:Badumna.NetworkStatus.TotalBytesSentPerSecond">
      <summary>
            Gets the total bytes sent per second.
            </summary>
    </member>
    <member name="M:Badumna.NetworkStatus.ToXml">
      <summary>
            Creates an XML document containing the status information.
            </summary>
      <returns>The XML document.</returns>
    </member>
    <member name="T:Badumna.Options">
      <summary>
            Specifies the configuration options for Badumna.
            </summary>
    </member>
    <member name="M:Badumna.Options.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Options" /> class with the default options.
            </summary>
    </member>
    <member name="M:Badumna.Options.#ctor(Badumna.Options)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Options" /> class, copying the options from the given instance.
            </summary>
      <param name="options">The options to copy.</param>
    </member>
    <member name="M:Badumna.Options.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Options" /> class from the contents of the
            specified file.
            </summary>
      <param name="filename">The path of the file to load the options from.</param>
      <exception cref="T:Badumna.Core.ConfigurationException">Thrown if the XML file could not be loaded.</exception>
    </member>
    <member name="M:Badumna.Options.#ctor(System.Xml.XPath.IXPathNavigable)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Options" /> class from an XML document.
            </summary>
      <param name="xml">The XML document containing the desired options; or <c>null</c> to use the default options.</param>
    </member>
    <member name="P:Badumna.Options.Arbitration">
      <summary>
            Gets a reference to the options for the arbitration module.
            </summary>
    </member>
    <member name="P:Badumna.Options.Connectivity">
      <summary>
            Gets a reference to the options for the connectivity module.
            </summary>
    </member>
    <member name="P:Badumna.Options.IsInCppMode">
      <summary>
            Gets or sets a value indicating whether this peer is in CPP mode.
            </summary>
    </member>
    <member name="P:Badumna.Options.Logger">
      <summary>
            Gets a reference to the options for the logger module.
            </summary>
    </member>
    <member name="P:Badumna.Options.Matchmaking">
      <summary>
            Gets a reference to the options for the Matchmaking module.
            </summary>
    </member>
    <member name="P:Badumna.Options.Overload">
      <summary>
            Gets a reference to the options for the overload module.
            </summary>
    </member>
    <member name="M:Badumna.Options.Save(System.String)">
      <summary>
            Stores the current options into the specified file in XML format.
            </summary>
      <param name="filename">The name of the file to store the options into.</param>
    </member>
    <member name="M:Badumna.Options.Save(System.Xml.XmlWriter)">
      <summary>
            Stores the current options in XML format.
            </summary>
      <param name="xmlWriter">The writer to use to write the options.</param>
    </member>
    <member name="M:Badumna.Options.Validate">
      <summary>
            Validates all options to ensure they are consistent.
            </summary>
      <exception cref="T:Badumna.Core.ConfigurationException">Thrown if the configuration is not valid.  Check the
            <see cref="T:Badumna.Core.ConfigurationException" /> instance for further details.</exception>
    </member>
    <member name="P:Badumna.Options.Validation">
      <summary>
            Gets a reference to the options for the Validation module.
            </summary>
    </member>
    <member name="T:Badumna.OverloadModule">
      <summary>
            Configuration options for the overload system.
            </summary>
    </member>
    <member name="M:Badumna.OverloadModule.DisableForcedOverload">
      <summary>
            Disables forced overloading.
            </summary>
    </member>
    <member name="M:Badumna.OverloadModule.EnableForcedOverload(System.String)">
      <summary>
            Enables forced overloading.
            </summary>
      <param name="testingOnlyAcknowledgement">Must contain the string <c>"i_understand_this_is_for_testing_only"</c>
            to indicate acknowledgement that this feature is not intended for use in production.</param>
    </member>
    <member name="P:Badumna.OverloadModule.IsClientEnabled">
      <summary>
            Gets or sets a value indicating whether this peer will send its excess
            outbound traffic via an overload server.  Defaults to <c>false</c>.
            </summary>
    </member>
    <member name="P:Badumna.OverloadModule.IsForced">
      <summary>
            Gets a value indicating whether overload is forced on.  Defaults to <c>false</c>.
            </summary>
    </member>
    <member name="P:Badumna.OverloadModule.IsServer">
      <summary>
            Gets or sets a value indicating whether this peer should forward traffic for
            other peers.  Defaults to <c>false</c>.
            </summary>
    </member>
    <member name="P:Badumna.OverloadModule.OutboundTrafficLimitBytesPerSecond">
      <summary>
            Gets or sets the outbound traffic limit in bytes/second before it should switch  
            to overload server.
            <remarks>
            Set this with a resonable value, as this value will be used as a reference whether this peer
            considered overloaded and should send its excess outbound traffic via an overload server. This 
            is not a hard limit, the actual traffic may still exceed this limit.
            </remarks></summary>
    </member>
    <member name="P:Badumna.OverloadModule.ServerAddress">
      <summary>
            Gets or sets the overload server address.  Defaults to <c>null</c>.
            </summary>
    </member>
    <member name="T:Badumna.PublicAddressChangedDelegate">
      <summary>
            A delegate used to indicate that the public IP address, port or the NAT type has changed. 
            </summary>
    </member>
    <member name="T:Badumna.ReplicableAttribute">
      <summary>
            Attribute for marking properties of a replicable entity that form part of
            its replicable state.
            </summary>
    </member>
    <member name="M:Badumna.ReplicableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.ReplicableAttribute" /> class</summary>
    </member>
    <member name="T:Badumna.RPCManager">
      <summary>
            Manages remotely calling methods on original and replica entities.
            </summary>
    </member>
    <member name="M:Badumna.RPCManager.RegisterRPCSignature``3">
      <summary>
            Register a signature for an method with 3 parameters available via RPC.
            </summary>
      <typeparam name="T1">The type of the first parameter.</typeparam>
      <typeparam name="T2">The type of the second parameter.</typeparam>
      <typeparam name="T3">The type of the third parameter.</typeparam>
    </member>
    <member name="M:Badumna.RPCManager.RegisterRPCSignature``4">
      <summary>
            Register a signature for an method with 4 parameters available via RPC.
            </summary>
      <typeparam name="T1">The type of the first parameter.</typeparam>
      <typeparam name="T2">The type of the second parameter.</typeparam>
      <typeparam name="T3">The type of the third parameter.</typeparam>
      <typeparam name="T4">The type of the fourth parameter.</typeparam>
    </member>
    <member name="M:Badumna.RPCManager.RegisterRPCSignature``5">
      <summary>
            Register a signature for an method with 5 parameters available via RPC.
            </summary>
      <typeparam name="T1">The type of the first parameter.</typeparam>
      <typeparam name="T2">The type of the second parameter.</typeparam>
      <typeparam name="T3">The type of the third parameter.</typeparam>
      <typeparam name="T4">The type of the fourth parameter.</typeparam>
      <typeparam name="T5">The type of the fifth parameter.</typeparam>
    </member>
    <member name="M:Badumna.RPCManager.RegisterRPCSignature``2">
      <summary>
            Register a signature for an method with 2 parameters available via RPC.
            </summary>
      <typeparam name="T1">The type of the first parameter.</typeparam>
      <typeparam name="T2">The type of the second parameter.</typeparam>
    </member>
    <member name="M:Badumna.RPCManager.RegisterRPCSignature``1">
      <summary>
            Register a signature for an method available via RPC.
            </summary>
      <typeparam name="T1">The type of the first parameter.</typeparam>
    </member>
    <member name="M:Badumna.RPCManager.RegisterRPCSignature``6">
      <summary>
            Register a signature for an method available via RPC.
            </summary>
      <typeparam name="T1">The type of the first parameter.</typeparam>
      <typeparam name="T2">The type of the second parameter.</typeparam>
      <typeparam name="T3">The type of the third parameter.</typeparam>
      <typeparam name="T4">The type of the fourth parameter.</typeparam>
      <typeparam name="T5">The type of the fifth parameter.</typeparam>
      <typeparam name="T6">The type of the sixth parameter.</typeparam>
    </member>
    <member name="T:Badumna.ServiceConnectionResultType">
      <summary>
            The types of connection timeout.
            </summary>
    </member>
    <member name="F:Badumna.ServiceConnectionResultType.Success">
      <summary>
            Successfully connected without error. 
            </summary>
    </member>
    <member name="F:Badumna.ServiceConnectionResultType.ConnectionTimeout">
      <summary>
            Failed to connect.
            </summary>
    </member>
    <member name="F:Badumna.ServiceConnectionResultType.ServiceNotAvailable">
      <summary>
            Failed to locate any service host.
            </summary>
    </member>
    <member name="T:Badumna.SmoothingAttribute">
      <summary>
            An attribute used to indicate that replicated value of a property should be smoothed by Badumna.
            <para />
            Normally, a replicable attribute will be updated whenever Badumna receives an update from the
            network. If Smoothing is used, Badumna will instead update the property frequently with
            values that are interpolated (or extrapolated) from the most recent values received.
            </summary>
    </member>
    <member name="M:Badumna.SmoothingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.SmoothingAttribute" /> class</summary>
    </member>
    <member name="P:Badumna.SmoothingAttribute.Extrapolation">
      <summary>
            Gets or sets the time limit for extrapolation in milliseconds (defaults to 200ms).
            </summary>
    </member>
    <member name="P:Badumna.SmoothingAttribute.Interpolation">
      <summary>
            Gets or sets the delay to be used for interpolation in milliseconds (defaults to 200ms).
            </summary>
    </member>
    <member name="P:Badumna.SmoothingAttribute.RateOfChangeProperty">
      <summary>
            Gets or sets the name of the property holding the rate of change of the smoothed property.
            </summary>
    </member>
    <member name="P:Badumna.SmoothingAttribute.UsesRateOfChangeProperty">
      <summary>
            Gets a value indicating whether to use a rate of change property (instead of estimating it).
            </summary>
    </member>
    <member name="T:Badumna.TunnelMode">
      <summary>
            Specifies when a tunnelling connection should be used.
            </summary>
    </member>
    <member name="F:Badumna.TunnelMode.Off">
      <summary>
            Never use tunnelling.
            </summary>
    </member>
    <member name="F:Badumna.TunnelMode.Auto">
      <summary>
            Use tunnelling if a direct connection cannot be established.
            </summary>
    </member>
    <member name="F:Badumna.TunnelMode.On">
      <summary>
            Always use tunnelling.
            </summary>
    </member>
    <member name="T:Badumna.TypeRegistry">
      <summary>
            Registry for replicable types.
            </summary>
    </member>
    <member name="M:Badumna.TypeRegistry.RegisterImmutableReferenceType``1(Badumna.Autoreplication.Serialization.SerializationMethod{``0},Badumna.Autoreplication.Serialization.DeserializationMethod{``0})">
      <summary>
            Register an immutable reference type for replication.
            </summary>
      <param name="serializer">A delegate for serializing values of the type to a stream.</param>
      <param name="deserializer">A delegate for deserializing values of the type from a stream.</param>
      <typeparam name="T">The immutable reference type being registered.</typeparam>
    </member>
    <member name="M:Badumna.TypeRegistry.RegisterMutableReferenceType``1(Badumna.Autoreplication.Serialization.SerializationMethod{``0},Badumna.Autoreplication.Serialization.DeserializationMethod{``0},Badumna.Autoreplication.Serialization.FactoryMethod{``0})">
      <summary>
            Register a mutable reference type for replication.
            </summary>
      <param name="serializer">A delegate for serializing values of the type to a stream.</param>
      <param name="deserializer">A delegate for deserializing values of the type from a stream.</param>
      <param name="copyMethod">A delegate for creating a new instance of the type, with a value
            equal to a given instance.</param>
      <typeparam name="T">The mutable reference type being registered.</typeparam>
    </member>
    <member name="M:Badumna.TypeRegistry.RegisterValueType``1(Badumna.Autoreplication.Serialization.SerializationMethod{``0},Badumna.Autoreplication.Serialization.DeserializationMethod{``0})">
      <summary>
            Register a value type for replication.
            </summary>
      <param name="serializer">A delegate for serializing values of the type to a stream.</param>
      <param name="deserializer">A delegate for deserializing values of the type from a stream.</param>
      <typeparam name="T">The value type being registered.</typeparam>
    </member>
    <member name="T:Badumna.ValidationModule">
      <summary>
            Configuration options for the validation system.
            </summary>
    </member>
    <member name="P:Badumna.ValidationModule.Servers">
      <summary>
            Gets a list of all the server details.
            </summary>
    </member>
    <member name="T:Badumna.ValidationServerDetails">
      <summary>
            Identifies an arbitration server.
            </summary>
    </member>
    <member name="M:Badumna.ValidationServerDetails.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.ValidationServerDetails" /> class that
            identifies a server that will be located using distributed lookup.
            </summary>
      <param name="name">The name identifying the arbitration server.</param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is empty or <c>null</c>.</exception>
    </member>
    <member name="M:Badumna.ValidationServerDetails.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.ValidationServerDetails" /> class with
            a specific server address.
            </summary>
      <param name="name">The name identifying the arbitration server.</param>
      <param name="address">The server address, or <c>null</c> to indicate that distributed lookup should be used.</param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is empty or <c>null</c>.</exception>
    </member>
    <member name="P:Badumna.ValidationServerDetails.Address">
      <summary>
            Gets the address of the server.
            </summary>
    </member>
    <member name="P:Badumna.ValidationServerDetails.Name">
      <summary>
            Gets the name of the server.
            </summary>
    </member>
    <member name="M:Badumna.ValidationServerDetails.ToString">
      <summary>
            Returns a string representing the server details in the form <c>"name[;address]"</c>.  The
            address component is only present if an address is specified (i.e. it is not present
            if distributed lookup is used).
            </summary>
      <returns>A string representing the instance.</returns>
    </member>
    <member name="P:Badumna.ValidationServerDetails.UseDistributedLookup">
      <summary>
            Gets a value indicating whether distributed lookup will be used.
            </summary>
    </member>
    <member name="T:Badumna.Arbitration.ArbitrationConnectionResultHandler">
      <summary>
            A delegate for handling arbitration connection results.
            </summary>
      <param name="type">The result type indicating the connection result.</param>
    </member>
    <member name="T:Badumna.Arbitration.ArbitrationEvent">
      <summary>
            Defines an arbitration event type.  All arbitration events must derive
            from this class.
            </summary>
    </member>
    <member name="M:Badumna.Arbitration.ArbitrationEvent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Arbitration.ArbitrationEvent" /> class</summary>
    </member>
    <member name="M:Badumna.Arbitration.ArbitrationEvent.Serialize(System.IO.BinaryWriter)">
      <summary>
            Serializes the content of the arbitration event into the writer.
            </summary>
      <param name="writer">The BinaryWriter the data should be written to</param>
    </member>
    <member name="P:Badumna.Arbitration.ArbitrationEvent.SerializedLength">
      <summary>
            Gets the length of the serialized data in bytes.
            </summary>
    </member>
    <member name="T:Badumna.Arbitration.ArbitrationEventSet">
      <summary>
            Defines a set of arbitration event types and facilitates their serialization and deserialization to byte arrays.
            </summary>
    </member>
    <member name="M:Badumna.Arbitration.ArbitrationEventSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Arbitration.ArbitrationEventSet" /> class</summary>
    </member>
    <member name="M:Badumna.Arbitration.ArbitrationEventSet.Deserialize(System.Byte[])">
      <summary>
            Deserialize an event.  The returned event will be of the same type
            as was serialized on the remote end.  It will be constructed by
            calling the constructor which takes a single BinaryReader as a parameter.
            </summary>
      <param name="data">The data to deserialize</param>
      <returns>The event that was serialized</returns>
    </member>
    <member name="M:Badumna.Arbitration.ArbitrationEventSet.Register(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Register the set of types specified by the IEnumerable.  Each Type must derive from ArbirationEvent
            and define a contructor that takes a single BinaryReader parameter.
            Cannot be called after a call to Serialize or Deserialize has been made.
            </summary>
      <param name="clientEventTypes">The types to register</param>
    </member>
    <member name="M:Badumna.Arbitration.ArbitrationEventSet.Register(System.Type)">
      <summary>
            Register the type specified.  The type must derive from ArbirationEvent
            and define a contructor that takes a single BinaryReader parameter.
            Cannot be called after a call to Serialize or Deserialize has been made.
            </summary>
      <param name="clientEventType">The type to register</param>
    </member>
    <member name="M:Badumna.Arbitration.ArbitrationEventSet.Register(System.Type[])">
      <summary>
            Register the set of types specified as parameters.  Each Type must derive from ArbirationEvent
            and define a contructor that takes a single BinaryReader parameter.
            Cannot be called after a call to Serialize or Deserialize has been made.
            </summary>
      <param name="clientEventTypes">The types to register</param>
    </member>
    <member name="M:Badumna.Arbitration.ArbitrationEventSet.Serialize(Badumna.Arbitration.ArbitrationEvent)">
      <summary>
            Serialize the clientEvent into a byte stream.  This method will
            invoke the SerializedLength property and Serialize method on the
            clientEvent.
            </summary>
      <param name="clientEvent">The event to serialize</param>
      <returns>A byte array containing the serialized data</returns>
      <exception cref="T:System.InvalidOperationException">Thrown when the serialized length of the
            arbitration event exceeds that specified in its <see cref="P:Badumna.Arbitration.ArbitrationEvent.SerializedLength" /> property.</exception>
    </member>
    <member name="T:Badumna.Arbitration.HandleClientDisconnect">
      <summary>
            A delegate invoked on the arbitrator when a client disconnects or times out.
            </summary>
      <param name="sessionId">The id identifying the session</param>
    </member>
    <member name="T:Badumna.Arbitration.HandleClientMessage">
      <summary>
            A delegate invoked on the arbitrator that processes messages arriving from clients.
            </summary>
      <param name="sessionId">An id that uniquely identifies the session</param>
      <param name="message">The message sent by the client</param>
    </member>
    <member name="T:Badumna.Arbitration.HandleConnectionFailure">
      <summary>
            A delegate invoked on the client when the connection to the server fails for any reason.
            </summary>
    </member>
    <member name="T:Badumna.Arbitration.HandleServerMessage">
      <summary>
            A delegate invoked on the client that processes messages arriving from the arbitrator.
            </summary>
      <param name="message">The message sent by the arbitrator</param>
    </member>
    <member name="T:Badumna.Arbitration.IArbitrator">
      <summary>
            Repesents a session with an arbitrator.
            </summary>
    </member>
    <member name="M:Badumna.Arbitration.IArbitrator.Connect(Badumna.Arbitration.ArbitrationConnectionResultHandler,Badumna.Arbitration.HandleConnectionFailure,Badumna.Arbitration.HandleServerMessage)">
      <summary>
            Initiate the connection to the arbitration server.
            </summary>
      <param name="connectionResultHandler">A callback that will be called when connection has successfully completed, or failed.</param>
      <param name="connectionFailedHandler">A callback that will be called if connection fails.</param>
      <param name="serverEventHandler">A handler to be triggered when the arbitrator sends an event to this client.</param>
    </member>
    <member name="P:Badumna.Arbitration.IArbitrator.IsServerConnected">
      <summary>
            Gets a value indicating whether the connection to the arbitrator is established.
            </summary>
    </member>
    <member name="M:Badumna.Arbitration.IArbitrator.SendEvent(System.Byte[])">
      <summary>
            Send an event to the arbitrator.  This will cause the arbitrator's
            HandleClientMessage handler to be called with the given message and
            a clientId that identifies this client.
            </summary>
      <param name="message">The byte array to send</param>
    </member>
    <member name="T:Badumna.Autoreplication.DoubleArithmetic">
      <summary>
            Provider of basic arithmetical operations on values of type double.
            </summary>
    </member>
    <member name="M:Badumna.Autoreplication.DoubleArithmetic.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Autoreplication.DoubleArithmetic" /> class</summary>
    </member>
    <member name="M:Badumna.Autoreplication.DoubleArithmetic.Add(System.Double,System.Double)">
      <summary>
            Add two values.
            </summary>
      <param name="first">The first addendum.</param>
      <param name="second">The second addendum.</param>
      <returns>The sum of the </returns>
    </member>
    <member name="M:Badumna.Autoreplication.DoubleArithmetic.Scale(System.Double,System.Double)">
      <summary>
            Scales a value by a factor.
            </summary>
      <param name="value">The value to scale.</param>
      <param name="factor">The factor to scale by.</param>
      <returns>The scaled value.</returns>
    </member>
    <member name="M:Badumna.Autoreplication.DoubleArithmetic.Subtract(System.Double,System.Double)">
      <summary>
            Subtract one value (the subtrahend) from another (the minuend).
            </summary>
      <param name="minuend">The minuend.</param>
      <param name="subtrahend">The subtrahend.</param>
      <returns>The difference.</returns>
    </member>
    <member name="T:Badumna.Autoreplication.FloatArithmetic">
      <summary>
            Provider of basic arithmetical operations on values of type float.
            </summary>
    </member>
    <member name="M:Badumna.Autoreplication.FloatArithmetic.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Autoreplication.FloatArithmetic" /> class</summary>
    </member>
    <member name="M:Badumna.Autoreplication.FloatArithmetic.Add(System.Single,System.Single)">
      <summary>
            Add two values.
            </summary>
      <param name="first">The first addendum.</param>
      <param name="second">The second addendum.</param>
      <returns>The sum of the </returns>
    </member>
    <member name="M:Badumna.Autoreplication.FloatArithmetic.Scale(System.Single,System.Double)">
      <summary>
            Scales a value by a factor.
            </summary>
      <param name="value">The value to scale.</param>
      <param name="factor">The factor to scale by.</param>
      <returns>The scaled value.</returns>
    </member>
    <member name="M:Badumna.Autoreplication.FloatArithmetic.Subtract(System.Single,System.Single)">
      <summary>
            Subtract one value (the subtrahend) from another (the minuend).
            </summary>
      <param name="minuend">The minuend.</param>
      <param name="subtrahend">The subtrahend.</param>
      <returns>The difference.</returns>
    </member>
    <member name="T:Badumna.Autoreplication.IArithmetic`1">
      <summary>
            Interface for providers of basic arithmetical operations on values of a given type.
            </summary>
      <typeparam name="T">The type to provide arithmetical operations for.</typeparam>
    </member>
    <member name="M:Badumna.Autoreplication.IArithmetic`1.Add(`0,`0)">
      <summary>
            Add two values.
            </summary>
      <param name="first">The first addendum.</param>
      <param name="second">The second addendum.</param>
      <returns>The sum of the </returns>
    </member>
    <member name="M:Badumna.Autoreplication.IArithmetic`1.Scale(`0,System.Double)">
      <summary>
            Scales a value by a factor.
            </summary>
      <param name="value">The value to scale.</param>
      <param name="factor">The factor to scale by.</param>
      <returns>The scaled value.</returns>
    </member>
    <member name="M:Badumna.Autoreplication.IArithmetic`1.Subtract(`0,`0)">
      <summary>
            Subtract one value (the subtrahend) from another (the minuend).
            </summary>
      <param name="minuend">The minuend.</param>
      <param name="subtrahend">The subtrahend.</param>
      <returns>The difference.</returns>
    </member>
    <member name="T:Badumna.Autoreplication.ReplicationException">
      <summary>
            Exception indicating a problem with replication.
            </summary>
    </member>
    <member name="T:Badumna.Autoreplication.RPCException">
      <summary>
            Exception indicating a problem with RPC use.
            </summary>
    </member>
    <member name="T:Badumna.Autoreplication.TypeReplicationException">
      <summary>
            Exception indicating that an entity has been found with a replicable property of a type
            that has not been registered with Badumna for replication.
            </summary>
    </member>
    <member name="T:Badumna.Autoreplication.Vector3Arithmetic">
      <summary>
            Provider of basic arithmetical operations on values of Badumna's Vector3 type.
            </summary>
    </member>
    <member name="M:Badumna.Autoreplication.Vector3Arithmetic.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Autoreplication.Vector3Arithmetic" /> class</summary>
    </member>
    <member name="M:Badumna.Autoreplication.Vector3Arithmetic.Add(Badumna.DataTypes.Vector3,Badumna.DataTypes.Vector3)">
      <summary>
            Add two values.
            </summary>
      <param name="first">The first addendum.</param>
      <param name="second">The second addendum.</param>
      <returns>The sum of the </returns>
    </member>
    <member name="M:Badumna.Autoreplication.Vector3Arithmetic.Scale(Badumna.DataTypes.Vector3,System.Double)">
      <summary>
            Scales a value by a factor.
            </summary>
      <param name="value">The value to scale.</param>
      <param name="factor">The factor to scale by.</param>
      <returns>The scaled value.</returns>
    </member>
    <member name="M:Badumna.Autoreplication.Vector3Arithmetic.Subtract(Badumna.DataTypes.Vector3,Badumna.DataTypes.Vector3)">
      <summary>
            Subtract one value (the subtrahend) from another (the minuend).
            </summary>
      <param name="minuend">The minuend.</param>
      <param name="subtrahend">The subtrahend.</param>
      <returns>The difference.</returns>
    </member>
    <member name="T:Badumna.Autoreplication.Serialization.DeserializationMethod">
      <summary>
            Non-generic delegate type for deserialization methods.
            </summary>
      <param name="reader">A reader for reading object data from a stream.</param>
      <returns>A new object created with data deserialized from a stream.</returns>
    </member>
    <member name="T:Badumna.Autoreplication.Serialization.DeserializationMethod`1">
      <summary>
            Generic delegate type for deserialization methods.
            </summary>
      <param name="reader">A reader for reading object data from a stream.</param>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <returns>A new object created with data deserialized from a stream.</returns>
    </member>
    <member name="T:Badumna.Autoreplication.Serialization.FactoryMethod`1">
      <summary>
            Generic delegate for copy constructor factory methods.
            </summary>
      <param name="other">The object to copy.</param>
      <typeparam name="T">The type of objects the factory creates.</typeparam>
      <returns>New copies of other.</returns>
    </member>
    <member name="T:Badumna.Autoreplication.Serialization.RpcSignature">
      <summary>
            Delegate for representing the signature of a method with no parameters.
            </summary>
    </member>
    <member name="T:Badumna.Autoreplication.Serialization.RpcSignature`1">
      <summary>
            Delegate for representing the signature of a method with 1 parameter.
            </summary>
      <param name="arg1">The first parameter.</param>
      <typeparam name="T1">The type of the first parameter.</typeparam>
    </member>
    <member name="T:Badumna.Autoreplication.Serialization.RpcSignature`2">
      <summary>
            Delegate for representing the signature of a method with 2 parameters.
            </summary>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <typeparam name="T1">The type of the first parameter.</typeparam>
      <typeparam name="T2">The type of the second parameter.</typeparam>
    </member>
    <member name="T:Badumna.Autoreplication.Serialization.RpcSignature`3">
      <summary>
            Delegate for representing the signature of a method with 3 parameters.
            </summary>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <typeparam name="T1">The type of the first parameter.</typeparam>
      <typeparam name="T2">The type of the second parameter.</typeparam>
      <typeparam name="T3">The type of the third parameter.</typeparam>
    </member>
    <member name="T:Badumna.Autoreplication.Serialization.RpcSignature`4">
      <summary>
            Delegate for representing the signature of a method with 4 parameters.
            </summary>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <typeparam name="T1">The type of the first parameter.</typeparam>
      <typeparam name="T2">The type of the second parameter.</typeparam>
      <typeparam name="T3">The type of the third parameter.</typeparam>
      <typeparam name="T4">The type of the fourth parameter.</typeparam>
    </member>
    <member name="T:Badumna.Autoreplication.Serialization.RpcSignature`5">
      <summary>
            Delegate for representing the signature of a method with 5 parameters.
            </summary>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <typeparam name="T1">The type of the first parameter.</typeparam>
      <typeparam name="T2">The type of the second parameter.</typeparam>
      <typeparam name="T3">The type of the third parameter.</typeparam>
      <typeparam name="T4">The type of the fourth parameter.</typeparam>
      <typeparam name="T5">The type of the fifth parameter.</typeparam>
    </member>
    <member name="T:Badumna.Autoreplication.Serialization.RpcSignature`6">
      <summary>
            Delegate for representing the signature of a method with 6 parameters.
            </summary>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <param name="arg6">The sixth parameter.</param>
      <typeparam name="T1">The type of the first parameter.</typeparam>
      <typeparam name="T2">The type of the second parameter.</typeparam>
      <typeparam name="T3">The type of the third parameter.</typeparam>
      <typeparam name="T4">The type of the fourth parameter.</typeparam>
      <typeparam name="T5">The type of the fifth parameter.</typeparam>
      <typeparam name="T6">The type of the sixth parameter.</typeparam>
    </member>
    <member name="T:Badumna.Autoreplication.Serialization.SerializationMethod">
      <summary>
            Non-generic delegate type for serialization methods.
            </summary>
      <param name="obj">The object to serialize.</param>
      <param name="writer">A writer for writing object data to a stream.</param>
    </member>
    <member name="T:Badumna.Autoreplication.Serialization.SerializationMethod`1">
      <summary>
            Generic delegate type for serialization methods.
            </summary>
      <param name="obj">The object to serialize.</param>
      <param name="writer">A writer for writing object data to a stream.</param>
      <typeparam name="T">The type of the object to serialize.</typeparam>
    </member>
    <member name="T:Badumna.Chat.ChatChannel">
      <summary>
            A Chat Channel
            </summary>
    </member>
    <member name="P:Badumna.Chat.ChatChannel.Id">
      <summary>
            Gets this channel's ID. Note that this ID is only unique within the
            scope of a ChatSession.
            </summary>
    </member>
    <member name="M:Badumna.Chat.ChatChannel.SendMessage(System.String)">
      <summary>
            Send a message on this channel.
            </summary>
      <param name="message">The message content</param>
    </member>
    <member name="M:Badumna.Chat.ChatChannel.Unsubscribe">
      <summary>
            Unsubscribe (remove the user) from this channel.
            After calling this method, you should not attempt to use this object
            for any other operation.
            </summary>
    </member>
    <member name="T:Badumna.Chat.ChatChannelId">
      <summary>
            An handle for chat channels.
            </summary>
    </member>
    <member name="M:Badumna.Chat.ChatChannelId.#ctor(Badumna.Chat.ChatChannelId)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Chat.ChatChannelId" /> class.
            </summary>
      <param name="other">The other channel id.</param>
    </member>
    <member name="M:Badumna.Chat.ChatChannelId.CompareTo(Badumna.Chat.ChatChannelId)">
      <summary>
                    Compares the current object with another object of the same type.
                </summary>
      <param name="other">
                    An object to compare with this object.
                </param>
      <returns>
                    A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
                
                    Value 
                
                    Meaning 
                
                    Less than zero 
                
                    This object is less than the <paramref name="other" /> parameter.
                
                    Zero 
                
                    This object is equal to <paramref name="other" />. 
                
                    Greater than zero 
                
                    This object is greater than <paramref name="other" />. 
                </returns>
    </member>
    <member name="M:Badumna.Chat.ChatChannelId.Equals(Badumna.Chat.ChatChannelId)">
      <summary>
            Compare with another BadumnaId for value equality.
            </summary>
      <param name="other">The BadumnaId to compare with</param>
      <returns>True if the instances represent the same id, false otherwise.</returns>
    </member>
    <member name="M:Badumna.Chat.ChatChannelId.Equals(System.Object)">
      <summary>
            Compare with another object for value equality.
            </summary>
      <param name="other">The object to compare with.</param>
      <returns>
        <c>true</c> if the other object is a ChatChannelId with equal value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Badumna.Chat.ChatChannelId.GetHashCode">
      <summary>
            Gets the hash code for the instance.
            </summary>
      <returns>A hash code for the current BadumnaId.</returns>
    </member>
    <member name="P:Badumna.Chat.ChatChannelId.Name">
      <summary>
            Gets or sets the friendly channel name.
            This is for descriptive purposes only, and does not contribute to channel ID equality.
            </summary>
    </member>
    <member name="M:Badumna.Chat.ChatChannelId.op_Equality(Badumna.Chat.ChatChannelId,Badumna.Chat.ChatChannelId)">
      <summary>
            Equality operator. Returns true only if the two given ChatChannelIds are equal
            </summary>
      <param name="a">First comparand.</param>
      <param name="b">Second comparand.</param>
      <returns>True if a and b are equal</returns>
    </member>
    <member name="M:Badumna.Chat.ChatChannelId.op_Inequality(Badumna.Chat.ChatChannelId,Badumna.Chat.ChatChannelId)">
      <summary>
            Inequality operator. Returns true if the two given ChatChannelIds are not equal.
            </summary>
      <param name="a">First comparand.</param>
      <param name="b">Second comparand.</param>
      <returns>True if a and b are not equal</returns>
    </member>
    <member name="M:Badumna.Chat.ChatChannelId.ToInvariantIDString" />
    <member name="M:Badumna.Chat.ChatChannelId.ToString">
      <summary>
            Renders a ChatChannelId as a string for debugging purposes.  No guarantee is made that the format
            of this string will not change.  ChatChannelId should be treated as an opaque identifier.
            </summary>
      <returns>A string that represents the current ChatChannelId.</returns>
    </member>
    <member name="P:Badumna.Chat.ChatChannelId.Type">
      <summary>
            Gets the channel type.
            </summary>
    </member>
    <member name="T:Badumna.Chat.ChatChannelType">
      <summary>
            The type of chat channel
            </summary>
    </member>
    <member name="F:Badumna.Chat.ChatChannelType.Unknown">
      <summary>
            Unknown. Used internaly.
            </summary>
    </member>
    <member name="F:Badumna.Chat.ChatChannelType.Private">
      <summary>
            A chat channel between two users
            </summary>
    </member>
    <member name="F:Badumna.Chat.ChatChannelType.Proximity">
      <summary>
            Chat within the area of interest for a given entity
            </summary>
    </member>
    <member name="F:Badumna.Chat.ChatChannelType.Group">
      <summary>
            A chat channel with any number of people
            </summary>
    </member>
    <member name="F:Badumna.Chat.ChatChannelType.Local">
      <summary>
            Messages that are not sent to other peers. Used internally.
            </summary>
    </member>
    <member name="T:Badumna.Chat.ChatInvitationHandler">
      <summary>
            A callback delegate for notification of a request by the given user for a private channel subscription.
            A call to AcceptInvitation() should be made with the given channel id to accept the invitation, otherwise
            the invitation is implicitly rejected.
            </summary>
      <param name="channel">The new channel to be used if the invitation is accepted</param>
      <param name="displayName">The display name of the requesting user.</param>
    </member>
    <member name="T:Badumna.Chat.ChatMessageHandler">
      <summary>
            A callback delegate for notification of the arrival of a chat message
            </summary>
      <param name="channel">The channel the message arrived on</param>
      <param name="userId">The id of the user that sent the message</param>
      <param name="message">The message</param>
    </member>
    <member name="T:Badumna.Chat.ChatMessageLengthException">
      <summary>
            An exception thrown when the legth of a chat message is too large.
            </summary>
    </member>
    <member name="T:Badumna.Chat.ChatPresenceHandler">
      <summary>
            A callback delegate for notification of a presence event
            </summary>
      <param name="channel">The channel the presence event relates to</param>
      <param name="userId">The id of the user that has changed presence</param>
      <param name="displayName">The (possibly) new display name of the user</param>
      <param name="status">The status of the user</param>
    </member>
    <member name="T:Badumna.Chat.ChatStatus">
      <summary>
            The status of a particular user on a particular channel. 
            </summary>
    </member>
    <member name="F:Badumna.Chat.ChatStatus.Online">
      <summary>
            The user is online and available to chat.
            </summary>
    </member>
    <member name="F:Badumna.Chat.ChatStatus.Offline">
      <summary>
            The user is unavailable. Please note, application should not call ChangePresence to set the presence status 
            to offline. 
            </summary>
    </member>
    <member name="F:Badumna.Chat.ChatStatus.Away">
      <summary>
            The user is online but not present.
            </summary>
    </member>
    <member name="F:Badumna.Chat.ChatStatus.Chat">
      <summary>
            The user is online and actively wants to chat.
            </summary>
    </member>
    <member name="F:Badumna.Chat.ChatStatus.DoNotDisturb">
      <summary>
            The user is online but does not want to be disturbed.
            </summary>
    </member>
    <member name="F:Badumna.Chat.ChatStatus.ExtendedAway">
      <summary>
            The user is online but in extended away status.
            </summary>
    </member>
    <member name="T:Badumna.Chat.IChatChannel">
      <summary>
            A Chat Channel.
            </summary>
    </member>
    <member name="P:Badumna.Chat.IChatChannel.Id">
      <summary>
            Gets this channel's ID. Note that this ID is only unique within the
            scope of a ChatSession.
            </summary>
    </member>
    <member name="M:Badumna.Chat.IChatChannel.SendMessage(System.String)">
      <summary>
            Send a message on this channel.
            </summary>
      <param name="message">The message content</param>
    </member>
    <member name="M:Badumna.Chat.IChatChannel.Unsubscribe">
      <summary>
            Unsubscribe (remove the user) from this channel.
            After calling this method, you should not attempt to use this object
            for any other operation.
            </summary>
    </member>
    <member name="T:Badumna.Chat.IChatSession">
      <summary>
            An interface which provides methods for the use of chat in the Badumna library. 
            </summary>
    </member>
    <member name="M:Badumna.Chat.IChatSession.AcceptInvitation(Badumna.Chat.ChatChannelId,Badumna.Chat.ChatMessageHandler,Badumna.Chat.ChatPresenceHandler)">
      <summary>
            Accepts an invitation to join a private channel.
            </summary>
      <param name="channel">The channel id received by the invitation handler</param>
      <param name="messageHandler">A message handler for the channel</param>
      <param name="presenceHandler">A presence handler for the channel</param>
      <returns>The newly-established private channel.</returns>
    </member>
    <member name="M:Badumna.Chat.IChatSession.ChangePresence(Badumna.Chat.ChatStatus)">
      <summary>
            Change the presence status of the current user.
            </summary>
      <param name="status">The presence status to set.</param>
    </member>
    <member name="M:Badumna.Chat.IChatSession.InviteUserToPrivateChannel(System.String)">
      <summary>
            Invite the specified user to join a private channel with the local user (using the name passed to
            OpenPrivateChannels()).
            </summary>
      <param name="username">The unique name that identifies the remote user</param>
    </member>
    <member name="M:Badumna.Chat.IChatSession.OpenPrivateChannels(Badumna.Chat.ChatInvitationHandler)">
      <summary>
            Initializes private channels, allowing other users to send invitations to the local user.
            </summary>
      <param name="invitationHandler">The callback delegate used to ask the user whether they wish to allow the given user a
            subscription to their private channel</param>
    </member>
    <member name="M:Badumna.Chat.IChatSession.SubscribeToProximityChannel(Badumna.DataTypes.BadumnaId,Badumna.Chat.ChatMessageHandler)">
      <summary>
            Subscribes to the proximity channel of the specified entity.
            </summary>
      <param name="entityId">The id of the entity in whose proximity to listen</param>
      <param name="messageHandler">The callback for notification of message arrival</param>
      <returns>The proximity channel.</returns>
    </member>
    <member name="M:Badumna.Chat.IChatSession.SubscribeToProximityChannel(Badumna.SpatialEntities.IReplicableEntity,Badumna.Chat.ChatMessageHandler)">
      <summary>
            Subscribes to the proximity channel of the specified entity.
            </summary>
      <param name="entity">The entity in whose proximity to listen.</param>
      <param name="messageHandler">The callback for notification of message arrival</param>
      <returns>The proximity channel.</returns>
    </member>
    <member name="T:Badumna.Chat.PresenceEventArgs">
      <summary>
            Presence event argument. 
            </summary>
    </member>
    <member name="T:Badumna.Chat.PresenceSubscriptionEventArgs">
      <summary>
            Presence subscription event argument.
            </summary>
    </member>
    <member name="T:Badumna.Controllers.CheckpointDataTooLongException">
      <summary>
            An exception that indicates that the data returned from a call Checkpoint is too large. 
            </summary>
    </member>
    <member name="T:Badumna.Controllers.DistributedController">
      <summary>
            A Distributed controller is a persistent (migrateable) object. It can be used to execute code that is not
            related to particular peers, akin to a server process. The controller is addressable independantly of its physical 
            (IP) address. This allows the application developer to write code to control parts of the system (eg. running NPCs or region controllers) 
            without having to concern themselves with which physical machine the process is run on. 
            </summary>
    </member>
    <member name="M:Badumna.Controllers.DistributedController.Checkpoint(System.IO.BinaryWriter)">
      <summary>
            Capture any state the controller would need if it were to run on another machine. 
            The data written to the given stream may be passed to the Recover() method, possibly on another machine.
            </summary>
      <param name="writer">A writer to which all state information should be written</param>
    </member>
    <member name="M:Badumna.Controllers.DistributedController.Process(System.TimeSpan)">
      <summary>
            This method is called periodically (once for every call to NetworkFacade.ProcessNetworkState) and is called from the 
            application thread. 
            </summary>
      <param name="duration">The elapsed time since the last call to this method()</param>
    </member>
    <member name="M:Badumna.Controllers.DistributedController.ReceiveMessage(Badumna.Core.MessageStream,Badumna.DataTypes.BadumnaId)">
      <summary>
            Process a message that has been sent to this controller. 
            </summary>
      <param name="message">The content of the message</param>
      <param name="source">The source of the message</param>
    </member>
    <member name="M:Badumna.Controllers.DistributedController.Recover">
      <summary>
            Recovers the controller to a default state. This method is called after a controller has migrated to another peer
            but the checkpoint data produced by the Checkpoint() method is not accessiable, for example, the controller migrated
            to the current local machine after its previous host crashed. This method makes sure that the controller's properties 
            such as position and velocity will be set to valid default values.   
            </summary>
    </member>
    <member name="M:Badumna.Controllers.DistributedController.Recover(System.IO.BinaryReader)">
      <summary>
            Read from the given stream all the state that was previously written to it by the Checkpoint() method.
            This method is called after a controller has migrated to another peer.
            </summary>
      <param name="reader">The reader to read the checkpoint data from.</param>
    </member>
    <member name="M:Badumna.Controllers.DistributedController.Replicate">
      <summary>
            Replicates any checkpointable state.
            Calling this method will cause the Checkpoint() method to be called. The data returned will be replicated on a number of 
            peers to ensure that if the current running peer fails the next peer responsible for the controller can continue from this 
            point.
            </summary>
      <exception cref="T:Badumna.Controllers.CheckpointDataTooLongException">Throw when too much data is written to the stream passed to Checkpoint()</exception>
    </member>
    <member name="M:Badumna.Controllers.DistributedController.Sleep">
      <summary>
            Put to sleep the controller.
            This method is called when the network layer decides that another peer is now responsible for this controller.
            </summary>
    </member>
    <member name="M:Badumna.Controllers.DistributedController.Stop">
      <summary>
            Remove the controller from the network
            </summary>
    </member>
    <member name="M:Badumna.Controllers.DistributedController.Wake">
      <summary>
            Wake the controller. 
            This method is called when the network layer decides that the local peer is now responsible for the controller.
            </summary>
    </member>
    <member name="T:Badumna.Controllers.DistributedSceneController">
      <summary>
            A distributed controller with convenience methods for the control of entities within a scene.
            </summary>
    </member>
    <member name="M:Badumna.Controllers.DistributedSceneController.#ctor(System.String)">
      <summary>
            Construct a new DistributedSceneController with the specified identifier.
            </summary>
      <param name="uniqueName">A unique string identifying the controller.</param>
    </member>
    <member name="M:Badumna.Controllers.DistributedSceneController.ConstructControlledEntity(System.UInt32)">
      <summary>
            This method provides a means to construct a certain entity a single time in the entire 
            network.
            Construct an entity with the given tag. The TakeControlOfEntity() method will be called 
            on the instance of this controller that is currently awake. 
            </summary>
      <param name="entityType">The type id associated with the entity to be created.</param>
    </member>
    <member name="M:Badumna.Controllers.DistributedSceneController.InstantiateRemoteEntity(Badumna.DataTypes.BadumnaId,System.UInt32)">
      <summary>
            InstantiateRemoteEntity is called when a new spatial entity arrives within the visible region of this distributed controller. 
            May occur when the controller is asleep.
            </summary>
      <param name="entityId">The entity id of the remote entity.</param>
      <param name="entityType">Type of the entity.</param>
      <returns>An instance of the spatial replica.</returns>
    </member>
    <member name="P:Badumna.Controllers.DistributedSceneController.NetworkFacade">
      <summary>
            Gets the Badumna network facade.
            </summary>
    </member>
    <member name="M:Badumna.Controllers.DistributedSceneController.RemoveEntity(Badumna.SpatialEntities.IReplicableEntity)">
      <summary>
            RemoveEntity is called when an entity leaves the visible region of this distributed controller. 
            May occur when the controller is asleep.
            </summary>
      <param name="replica">The replica.</param>
    </member>
    <member name="P:Badumna.Controllers.DistributedSceneController.Scene">
      <summary>
            A reference to the NetworkScene that this controller is operating in.
            </summary>
    </member>
    <member name="M:Badumna.Controllers.DistributedSceneController.TakeControlOfEntity(Badumna.DataTypes.BadumnaId,Badumna.SpatialEntities.ISpatialReplica,System.UInt32)">
      <summary>
            This method provides notification that the current instance of the controller is now responsible for the 
            given entity. 
            This method takes an <see cref="T:Badumna.SpatialEntities.ISpatialReplica" /> instance (the remote copy of the entity) and returns an <see cref="T:Badumna.SpatialEntities.ISpatialOriginal" /> 
            (the new original copy of the entity).
            </summary>
      <param name="entityId">This id of the entity</param>
      <param name="remoteEntity">The instance of the remote entity (may be null)</param>
      <param name="entityType">The type id associated with this entity, as passed to the ConstructControlledEntity()</param>
      <returns>A new ISpatialOriginal instance of the given remote entity</returns>
    </member>
    <member name="T:Badumna.Controllers.MissingConstructorException">
      <summary>
            An exception thrown when a type given to StartController does not have a constructor that takes a single string argument.
            </summary>
    </member>
    <member name="T:Badumna.Controllers.TooManyDistributedControllerException">
      <summary>
            An exception thrown when trying to start too many controllers on the local peer. 
            </summary>
    </member>
    <member name="T:Badumna.Core.BadumnaException">
      <summary>
            An exception thrown by the Badumna library; the root of the Badumna exception hierarchy.
            </summary>
    </member>
    <member name="T:Badumna.Core.ConfigurationException">
      <summary>
            An exception thrown if there is an issue with the configuration.  
            </summary>
    </member>
    <member name="M:Badumna.Core.ConfigurationException.#ctor">
      <summary>
            Constructs a new instance of the ConfigurationException class.
            </summary>
    </member>
    <member name="M:Badumna.Core.ConfigurationException.#ctor(Badumna.Core.ConfigurationException.ErrorCode)">
      <summary>
            Constructs a new instance of the ConfigurationException class.
            </summary>
      <param name="errorCode">The error code describing the cause of the exception.</param>
    </member>
    <member name="M:Badumna.Core.ConfigurationException.#ctor(Badumna.Core.ConfigurationException.ErrorCode,System.String)">
      <summary>
            Constructs a new instance of the ConfigurationException class.
            </summary>
      <param name="errorCode">The error code describing the cause of the exception.</param>
      <param name="message">Extra information specific to the current error code.</param>
    </member>
    <member name="M:Badumna.Core.ConfigurationException.#ctor(Badumna.Core.ConfigurationException.ErrorCode,System.String,System.Exception)">
      <summary>
            Constructs a new instance of the ConfigurationException class.
            </summary>
      <param name="errorCode">The error code describing the cause of the exception.</param>
      <param name="message">Extra information specific to the current error code.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Badumna.Core.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new instance of the ConfigurationException class by deserialization.
            </summary>
      <param name="serializationInfo">The serialized exception information.</param>
      <param name="streamingContext">The streaming context.</param>
    </member>
    <member name="M:Badumna.Core.ConfigurationException.#ctor(System.String)">
      <summary>
            Constructs a new instance of the ConfigurationException class with <see cref="P:Badumna.Core.ConfigurationException.Error" />
            set to <see cref="F:Badumna.Core.ConfigurationException.ErrorCode.Unspecified" />.
            </summary>
      <param name="message">A message describing the nature of the exception.</param>
    </member>
    <member name="M:Badumna.Core.ConfigurationException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new instance of the ConfigurationException class with <see cref="P:Badumna.Core.ConfigurationException.Error" />
            set to <see cref="F:Badumna.Core.ConfigurationException.ErrorCode.Unspecified" />.
            </summary>
      <param name="message">A message describing the nature of the exception.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="P:Badumna.Core.ConfigurationException.Error">
      <summary>
            Gets a value that indicates the type of configuration error that occurred.
            </summary>
    </member>
    <member name="M:Badumna.Core.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes the exception.
            </summary>
      <param name="info">The instance used to store the serialized data.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:Badumna.Core.ConfigurationException.ErrorCode">
      <summary>
            The possible types of configuration errors.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConfigurationException.ErrorCode.Unspecified">
      <summary>
            An unspecified error occured.  The Message property may contain further details.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConfigurationException.ErrorCode.InvalidTunnelUriScheme">
      <summary>
            A tunnel server URI was supplied with a scheme that was not 'http' or 'https'.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConfigurationException.ErrorCode.NoTunnelServersDefined">
      <summary>
            Tunnelling is enabled but the list of tunnel server URIs is empty.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConfigurationException.ErrorCode.DuplicateArbitrationServer">
      <summary>
            Two or more of the defined arbitration servers have the same name.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConfigurationException.ErrorCode.InvalidXml">
      <summary>
            The XML given does not match the expected format.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConfigurationException.ErrorCode.Inconsistent">
      <summary>
            Parts of the configuration are inconsistent with each other.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConfigurationException.ErrorCode.LoggingConfigurationError">
      <summary>
            An error related to the logging configuration occurred.  The Message property may contain further details.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConfigurationException.ErrorCode.InvalidUri">
      <summary>
            The URI string indicated by the Message property could not be parsed as a URI.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConfigurationException.ErrorCode.FileError">
      <summary>
            An error relating to file access occurred.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConfigurationException.ErrorCode.InvalidPort">
      <summary>
            The port is not an integer in the range 0-65535.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConfigurationException.ErrorCode.InvalidApplicationName">
      <summary>
            Invalid application name.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConfigurationException.ErrorCode.InvalidMatchmakingServerAddress">
      <summary>
            No matchmaking server address was specified, no port was specified,
            or the specified address could not be resolved.
            </summary>
    </member>
    <member name="T:Badumna.Core.ConnectivityException">
      <summary>
            An exception thrown if there is an issue with connectivity.
            </summary>
    </member>
    <member name="M:Badumna.Core.ConnectivityException.#ctor">
      <summary>
            Constructs a new instance of the ConnectivityException class.
            </summary>
    </member>
    <member name="M:Badumna.Core.ConnectivityException.#ctor(Badumna.Core.ConnectivityException.ErrorCode)">
      <summary>
            Constructs a new instance of the ConnectivityException class.
            </summary>
      <param name="errorCode">The error code describing the cause of the exception.</param>
    </member>
    <member name="M:Badumna.Core.ConnectivityException.#ctor(Badumna.Core.ConnectivityException.ErrorCode,System.String)">
      <summary>
            Constructs a new instance of the ConnectivityException class.
            </summary>
      <param name="errorCode">The error code describing the cause of the exception.</param>
      <param name="message">Extra information specific to the current error code.</param>
    </member>
    <member name="M:Badumna.Core.ConnectivityException.#ctor(Badumna.Core.ConnectivityException.ErrorCode,System.String,System.Exception)">
      <summary>
            Constructs a new instance of the ConnectivityException class.
            </summary>
      <param name="errorCode">The error code describing the cause of the exception.</param>
      <param name="message">Extra information specific to the current error code.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Badumna.Core.ConnectivityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new instance of the ConnectivityException class by deserialization.
            </summary>
      <param name="serializationInfo">The serialized exception information.</param>
      <param name="streamingContext">The streaming context.</param>
    </member>
    <member name="M:Badumna.Core.ConnectivityException.#ctor(System.String)">
      <summary>
            Constructs a new instance of the ConnectivityException class with <see cref="P:Badumna.Core.ConnectivityException.Error" />
            set to <see cref="F:Badumna.Core.ConnectivityException.ErrorCode.Unspecified" />.
            </summary>
      <param name="message">A message describing the nature of the exception.</param>
    </member>
    <member name="M:Badumna.Core.ConnectivityException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new instance of the ConnectivityException class with <see cref="P:Badumna.Core.ConnectivityException.Error" />
            set to <see cref="F:Badumna.Core.ConnectivityException.ErrorCode.Unspecified" />.
            </summary>
      <param name="message">A message describing the nature of the exception.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="P:Badumna.Core.ConnectivityException.Error">
      <summary>
            Gets a value that indicates the type of connectivity error that occurred.
            </summary>
    </member>
    <member name="M:Badumna.Core.ConnectivityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes the exception.
            </summary>
      <param name="info">The instance used to store the serialized data.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:Badumna.Core.ConnectivityException.ErrorCode">
      <summary>
            The possible types of connectivity errors.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConnectivityException.ErrorCode.Unspecified">
      <summary>
            An unspecified error occured.  The Message property may contain further details.
            </summary>
    </member>
    <member name="F:Badumna.Core.ConnectivityException.ErrorCode.UdpBlocked">
      <summary>
            The peer does not receive responses to its STUN requests, UDP traffic appears to be blocked.
            </summary>
    </member>
    <member name="T:Badumna.Core.MessageReadStream">
      <summary>
            A Stream implementation used to read data from message packets.
            </summary>
    </member>
    <member name="P:Badumna.Core.MessageReadStream.CanRead">
      <summary>
            Gets a value indicating whether the current stream supports reading. 
            </summary>
    </member>
    <member name="P:Badumna.Core.MessageReadStream.Position">
      <summary>
            Gets or sets the position within the current stream. 
            </summary>
    </member>
    <member name="M:Badumna.Core.MessageReadStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. 
            </summary>
      <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. </param>
      <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream. </param>
      <param name="count">The maximum number of bytes to be read from the current stream. </param>
      <returns />
    </member>
    <member name="T:Badumna.Core.MessageStream">
      <summary>
            A stream implementation used for reading and writing to message packets.
            </summary>
    </member>
    <member name="P:Badumna.Core.MessageStream.CanRead">
      <summary>
            Gets a value indicating whether the current stream supports reading. 
            </summary>
    </member>
    <member name="P:Badumna.Core.MessageStream.CanSeek">
      <summary>
            Gets a value indicating whether the current stream supports seeking. 
            </summary>
    </member>
    <member name="P:Badumna.Core.MessageStream.CanWrite">
      <summary>
            Gets a value indicating whether the current stream supports writing. 
            </summary>
    </member>
    <member name="M:Badumna.Core.MessageStream.Flush">
      <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
    </member>
    <member name="P:Badumna.Core.MessageStream.Length">
      <summary>
            Gets the length in bytes of the stream.
            </summary>
    </member>
    <member name="M:Badumna.Core.MessageStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. 
            </summary>
      <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. </param>
      <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream. </param>
      <param name="count">The maximum number of bytes to be read from the current stream. </param>
      <returns />
    </member>
    <member name="M:Badumna.Core.MessageStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            Sets the position within the current stream. 
            </summary>
      <param name="offset">A byte offset relative to the origin parameter. </param>
      <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position. </param>
      <returns>The new position within the current stream. </returns>
    </member>
    <member name="M:Badumna.Core.MessageStream.SetLength(System.Int64)">
      <summary>
            Length cannot be set. It is allocated as necessary.
            </summary>
      <param name="value" />
    </member>
    <member name="M:Badumna.Core.MessageStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. 
            </summary>
      <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream. </param>
      <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream. </param>
      <param name="count">The number of bytes to be written to the current stream. </param>
    </member>
    <member name="T:Badumna.Core.MessageWriteStream">
      <summary>
            A Stream implementation used to write data to message packets.
            The Dispose() method will cause the stream message to be sent. It is recommended to use the 
            'using' statement so that Dispose() is called automatically.
            </summary>
    </member>
    <member name="P:Badumna.Core.MessageWriteStream.CanWrite">
      <summary>
            Gets a value indicating whether the current stream supports writing. 
            </summary>
    </member>
    <member name="M:Badumna.Core.MessageWriteStream.Dispose(System.Boolean)">
      <summary>
            Sends the message
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="P:Badumna.Core.MessageWriteStream.Position">
      <summary>
            Gets or sets the position within the current stream. 
            </summary>
    </member>
    <member name="M:Badumna.Core.MessageWriteStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. 
            </summary>
      <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream. </param>
      <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream. </param>
      <param name="count">The number of bytes to be written to the current stream. </param>
    </member>
    <member name="T:Badumna.Core.TunnelRequestException">
      <summary>
            This exception is thrown when any tunnelled request fails.  When tunnelling is enabled, any
            request on the Badumna API may throw this exception if the request does not complete
            successfully.  The InnerException may provide additional information about the failure.
            </summary>
    </member>
    <member name="T:Badumna.CppWrapperStub.DeadReckonableOriginalStub">
      <summary>
            The stub for DeadReckonableOriginal. 
            </summary>
    </member>
    <member name="M:Badumna.CppWrapperStub.DeadReckonableOriginalStub.#ctor(Badumna.INetworkFacade)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.CppWrapperStub.DeadReckonableOriginalStub" /> class.
            </summary>
      <param name="facade">The network facade object.</param>
    </member>
    <member name="M:Badumna.CppWrapperStub.DeadReckonableOriginalStub.#ctor(System.String,Badumna.INetworkFacade)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.CppWrapperStub.DeadReckonableOriginalStub" /> class.
            </summary>
      <param name="id">The unique id.</param>
      <param name="facade">The network facade object.</param>
    </member>
    <member name="M:Badumna.CppWrapperStub.DeadReckonableOriginalStub.AttemptMovement(Badumna.DataTypes.Vector3)">
      <summary>
            This method if called on remote copies inside the NetworkFacade.ProcessNetworkState() method.
            The reckonedPosition is the current estimated position of the controlling entity.
            The implementation of this method should check that the new position is valid (i.e. check for collisions etc) 
            and apply it if so.
            </summary>
      <param name="reckonedPosition">The estimated position of the entity</param>
    </member>
    <member name="M:Badumna.CppWrapperStub.DeadReckonableOriginalStub.SetVelocity(System.Single,System.Single,System.Single)">
      <summary>
            Sets the velocity.
            </summary>
      <param name="x">The x value of the velocity.</param>
      <param name="y">The y value of the velocity.</param>
      <param name="z">The z value of the velocity.</param>
    </member>
    <member name="P:Badumna.CppWrapperStub.DeadReckonableOriginalStub.Velocity">
      <summary>
            Gets or sets the known velocity of the network entity.
            </summary>
    </member>
    <member name="P:Badumna.CppWrapperStub.DeadReckonableOriginalStub.VelocityX">
      <summary>
            Gets the velocity X value. This is for testing purpose. 
            </summary>
    </member>
    <member name="P:Badumna.CppWrapperStub.DeadReckonableOriginalStub.VelocityY">
      <summary>
            Gets the velocity Y value. This is for testing purpose. 
            </summary>
    </member>
    <member name="P:Badumna.CppWrapperStub.DeadReckonableOriginalStub.VelocityZ">
      <summary>
            Gets the velocity Z value. This is for testing purpose. 
            </summary>
    </member>
    <member name="T:Badumna.DataTypes.BadumnaId">
      <summary>
            A globably unique identifier.
            </summary>
    </member>
    <member name="M:Badumna.DataTypes.BadumnaId.#ctor(Badumna.DataTypes.BadumnaId)">
      <summary>
            Initializes a new instance of the BadumnaId class.
            </summary>
      <param name="copy">The BadumnaId to copy.</param>
    </member>
    <member name="M:Badumna.DataTypes.BadumnaId.CompareTo(Badumna.DataTypes.BadumnaId)">
      <summary>
            Imposes a consistent but arbitrary order on BadumnaIds so they can be used in
            binary searches, etc.
            </summary>
      <param name="other">The other BadumnaId to compare with.</param>
      <returns>An integer less than zero, zero, or an integer greater than zero depending on
            whether this BadumnaId is less than, equal to, or greater than the other BadumanId respectively.</returns>
    </member>
    <member name="M:Badumna.DataTypes.BadumnaId.CopyFrom(Badumna.DataTypes.BadumnaId)">
      <summary>
            Copies the value from another BadumnaId object.
            </summary>
      <param name="other">The other BadumnaId object.</param>
    </member>
    <member name="M:Badumna.DataTypes.BadumnaId.Equals(Badumna.DataTypes.BadumnaId)">
      <summary>
            Compare with another BadumnaId for value equality.
            </summary>
      <param name="other">The BadumnaId to compare with</param>
      <returns>True if the instances represent the same id, false otherwise.</returns>
    </member>
    <member name="M:Badumna.DataTypes.BadumnaId.Equals(System.Object)">
      <summary>
            Compare with another object for value equality.
            </summary>
      <param name="other">The object to compare with.</param>
      <returns>
        <c>true</c> if the other object is a BadumnaId with equal value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Badumna.DataTypes.BadumnaId.GetHashCode">
      <summary>
            Gets the hash code for the instance.
            </summary>
      <returns>A hash code for the current BadumnaId.</returns>
    </member>
    <member name="P:Badumna.DataTypes.BadumnaId.IsValid">
      <summary>
            Gets a value indicating whether the current BadumnaId is validly formed (i.e. not equal to BadumnaId.None).
            </summary>
    </member>
    <member name="P:Badumna.DataTypes.BadumnaId.None">
      <summary>
            Gets an empty identifier. 
            </summary>
    </member>
    <member name="M:Badumna.DataTypes.BadumnaId.op_Equality(Badumna.DataTypes.BadumnaId,Badumna.DataTypes.BadumnaId)">
      <summary>
            Equality operator. Returns true only if the two given BadumnaIds are equal
            </summary>
      <param name="a">First comparand.</param>
      <param name="b">Second comparand.</param>
      <returns>True if a and b are equal</returns>
    </member>
    <member name="M:Badumna.DataTypes.BadumnaId.op_Inequality(Badumna.DataTypes.BadumnaId,Badumna.DataTypes.BadumnaId)">
      <summary>
            Inequality operator. Returns true if the two given BadumnaIds are not equal.
            </summary>
      <param name="a">First comparand.</param>
      <param name="b">Second comparand.</param>
      <returns>True if a and b are not equal</returns>
    </member>
    <member name="M:Badumna.DataTypes.BadumnaId.ToInvariantIDString">
      <summary>
            Create a unique string ID that will remain invariant.
            </summary>
      <returns>A unique string ID that will remain invariant.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the local address is not set yet.</exception>
    </member>
    <member name="M:Badumna.DataTypes.BadumnaId.ToString">
      <summary>
            Renders a BadumnaId as a string for debugging purposes.  No guarantee is made that the format
            of this string will not change.  BadumnaId should be treated as an opaque identifier.
            </summary>
      <returns>A string that represents the current BadumnaId.</returns>
    </member>
    <member name="T:Badumna.DataTypes.GenericEventHandler`2">
      <summary>
            Represents a method for handling an event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A value type that contains the event data.</param>
      <typeparam name="TSender">The type of the source of the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="T:Badumna.DataTypes.Vector3">
      <summary>
            A 3 dimensional vector.
            </summary>
    </member>
    <member name="M:Badumna.DataTypes.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Contructor
            </summary>
      <param name="x" />
      <param name="y" />
      <param name="z" />
    </member>
    <member name="M:Badumna.DataTypes.Vector3.Dot(Badumna.DataTypes.Vector3)">
      <summary>
            Dot product of this and the given vector
            </summary>
      <param name="other" />
      <returns />
    </member>
    <member name="M:Badumna.DataTypes.Vector3.DotProduct(Badumna.DataTypes.Vector3,Badumna.DataTypes.Vector3)">
      <summary>
            Dot product of two given vectors
            </summary>
      <param name="vectorA" />
      <param name="vectorB" />
      <returns />
    </member>
    <member name="M:Badumna.DataTypes.Vector3.Equals(Badumna.DataTypes.Vector3)">
      <summary>
            eturns a value indicating whether the given Vector3 is equal to this instance.
            </summary>
      <param name="other" />
      <returns />
    </member>
    <member name="M:Badumna.DataTypes.Vector3.Equals(System.Object)">
      <summary>
            Returns a value indicating whether the given object is equal to this instance.
            </summary>
      <param name="obj" />
      <returns>True is the given object equals this Vector3 instance</returns>
    </member>
    <member name="M:Badumna.DataTypes.Vector3.GetHashCode">
      <summary>
            Returns the hash code of this instance.
            </summary>
      <returns />
    </member>
    <member name="P:Badumna.DataTypes.Vector3.Magnitude">
      <summary>
            The length of the vector
            </summary>
    </member>
    <member name="M:Badumna.DataTypes.Vector3.Normalize">
      <summary>
            Normalize this vector
            </summary>
      <returns />
    </member>
    <member name="M:Badumna.DataTypes.Vector3.Normalize(Badumna.DataTypes.Vector3)">
      <summary>
            Return the normalization of a given vector without changing the original
            </summary>
      <param name="vect" />
      <returns />
    </member>
    <member name="P:Badumna.DataTypes.Vector3.One">
      <summary>
            Return a vector with each component set to one.
            </summary>
    </member>
    <member name="M:Badumna.DataTypes.Vector3.op_Addition(Badumna.DataTypes.Vector3,Badumna.DataTypes.Vector3)">
      <summary>
            Addition of two vectors
            </summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Badumna.DataTypes.Vector3.op_Division(Badumna.DataTypes.Vector3,System.Single)">
      <summary>
            Division of a given vector
            </summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Badumna.DataTypes.Vector3.op_Equality(Badumna.DataTypes.Vector3,Badumna.DataTypes.Vector3)">
      <summary>
            Equality operator
            </summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Badumna.DataTypes.Vector3.op_Inequality(Badumna.DataTypes.Vector3,Badumna.DataTypes.Vector3)">
      <summary>
            Inequality operator
            </summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Badumna.DataTypes.Vector3.op_Multiply(Badumna.DataTypes.Vector3,System.Single)">
      <summary>
            Multiplication of a given vector
            </summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Badumna.DataTypes.Vector3.op_Multiply(System.Single,Badumna.DataTypes.Vector3)">
      <summary>
            Multiplication of a given vector
            </summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Badumna.DataTypes.Vector3.op_Subtraction(Badumna.DataTypes.Vector3,Badumna.DataTypes.Vector3)">
      <summary>
            Subtraction of two vectors (left - right)
            </summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Badumna.DataTypes.Vector3.ToString">
      <summary>
            Returns a human readable string represenation of the vector.
            </summary>
      <returns />
    </member>
    <member name="P:Badumna.DataTypes.Vector3.UnitX">
      <summary>
            Return an x unit vector (1, 0, 0).
            </summary>
    </member>
    <member name="P:Badumna.DataTypes.Vector3.UnitY">
      <summary>
            Return a y unit vector (0, 1, 0).
            </summary>
    </member>
    <member name="P:Badumna.DataTypes.Vector3.UnitZ">
      <summary>
            Return a z unit vector (0, 0, 1).
            </summary>
    </member>
    <member name="P:Badumna.DataTypes.Vector3.X">
      <summary>
            The X component of the vector.
            </summary>
    </member>
    <member name="P:Badumna.DataTypes.Vector3.Y">
      <summary>
            The Y component of the vector.
            </summary>
    </member>
    <member name="P:Badumna.DataTypes.Vector3.Z">
      <summary>
            The Z component of the vector.
            </summary>
    </member>
    <member name="P:Badumna.DataTypes.Vector3.Zero">
      <summary>
            Return a vector with each component set to zero.
            </summary>
    </member>
    <member name="T:Badumna.InterestManagement.RegionOptions">
      <summary>
            Region options.
            </summary>
    </member>
    <member name="F:Badumna.InterestManagement.RegionOptions.None">
      <summary>
            No options are specified.
            </summary>
    </member>
    <member name="F:Badumna.InterestManagement.RegionOptions.Inverse">
      <summary>
            The region is an inverse sphere.
            </summary>
    </member>
    <member name="F:Badumna.InterestManagement.RegionOptions.Uninterested">
      <summary>
            Prevents a region from receiving any notifications of intersections
            </summary>
    </member>
    <member name="T:Badumna.InterestManagement.RegionType">
      <summary>
            Region types.
            </summary>
    </member>
    <member name="F:Badumna.InterestManagement.RegionType.None">
      <summary>
            No type is specified.
            </summary>
    </member>
    <member name="F:Badumna.InterestManagement.RegionType.Source">
      <summary>
            TODO: documentation.
            </summary>
    </member>
    <member name="F:Badumna.InterestManagement.RegionType.Sink">
      <summary>
            TODO: documentation.
            </summary>
    </member>
    <member name="T:Badumna.Match.ChatType">
      <summary>
            Enumeration of possible types of chat message.
            </summary>
    </member>
    <member name="F:Badumna.Match.ChatType.None">
      <summary>
            Unused default state.
            </summary>
    </member>
    <member name="F:Badumna.Match.ChatType.Public">
      <summary>
            A public chat message for all members of a match.
            </summary>
    </member>
    <member name="F:Badumna.Match.ChatType.Private">
      <summary>
            A private chat message for a particular member of a match.
            </summary>
    </member>
    <member name="T:Badumna.Match.CreateReplica">
      <summary>
            A delegate called by the network layer when a new entity joins the match.
            The delegate should return the replica entity to which remote updates and custom messages will be applied.
            </summary>
      <param name="match">The match the entity belongs to.</param>
      <param name="source">The source of the entity (peer or host).</param>
      <param name="entityType">The application level type ID that was associated with this entity when the entity was registered on the
            owning peer.</param>
      <returns>An instance of the new entity.</returns>
    </member>
    <member name="T:Badumna.Match.EntitySource">
      <summary>
            Enumeration of possible classes of match entity.
            </summary>
    </member>
    <member name="F:Badumna.Match.EntitySource.None">
      <summary>
            Unused default state.
            </summary>
    </member>
    <member name="F:Badumna.Match.EntitySource.Peer">
      <summary>
            Entity that runs on a single peer.
            </summary>
    </member>
    <member name="F:Badumna.Match.EntitySource.Host">
      <summary>
            Entity runs on the match host.
            </summary>
    </member>
    <member name="T:Badumna.Match.Facade">
      <summary>
            Exposes Match API to application code.
            </summary>
    </member>
    <member name="M:Badumna.Match.Facade.CreateMatch(Badumna.Match.MatchmakingCriteria,System.Int32,System.String,Badumna.Match.CreateReplica,Badumna.Match.RemoveReplica)">
      <summary>
            Create a match as host.
            </summary>
      <param name="criteria">Matchmaking criteria that will be published to matchmaking server.</param>
      <param name="maxPlayers">The maximum number of players permitted in the match.</param>
      <param name="playerName">A name for the local player in the match (uniqueness not enforced).</param>
      <param name="createReplicaDelegate">Called when a new entity needs to be instantiated into the match.</param>
      <param name="removeReplicaDelegate">Called when an entity leave the match.</param>
      <returns>A new match.</returns>
    </member>
    <member name="M:Badumna.Match.Facade.CreateMatch``1(``0,Badumna.Match.MatchmakingCriteria,System.Int32,System.String,Badumna.Match.CreateReplica,Badumna.Match.RemoveReplica)">
      <summary>
            Create a match as host.
            </summary>
      <param name="controller">The object to use as match controller.</param>
      <param name="criteria">Matchmaking criteria that will be published to matchmaking server.</param>
      <param name="maxPlayers">The maximum number of players permitted in the match.</param>
      <param name="playerName">A name for the local player in the match (uniqueness not enforced).</param>
      <param name="createReplicaDelegate">Called when a new entity needs to be instantiated into the match.</param>
      <param name="removeReplicaDelegate">Called when an entity leave the match.</param>
      <typeparam name="T">The type of the match controller.</typeparam>
      <returns>A new match.</returns>
    </member>
    <member name="M:Badumna.Match.Facade.CreatePrivateMatch(Badumna.Match.MatchmakingCriteria,System.Int32,System.String,Badumna.Match.CreateReplica,Badumna.Match.RemoveReplica)">
      <summary>
            Create a private match as host.
            </summary>
      <param name="criteria">Matchmaking criteria that will be published to matchmaking server.</param>
      <param name="maxPlayers">The maximum number of players permitted in the match.</param>
      <param name="playerName">A name for the local player in the match (uniqueness not enforced).</param>
      <param name="createReplicaDelegate">Called when a new entity needs to be instantiated into the match.</param>
      <param name="removeReplicaDelegate">Called when an entity leave the match.</param>
      <returns>A new match.</returns>
    </member>
    <member name="M:Badumna.Match.Facade.CreatePrivateMatch``1(``0,Badumna.Match.MatchmakingCriteria,System.Int32,System.String,Badumna.Match.CreateReplica,Badumna.Match.RemoveReplica)">
      <summary>
            Create a private match as host.
            </summary>
      <param name="controller">The object to use as match controller.</param>
      <param name="criteria">Matchmaking criteria that will be published to matchmaking server.</param>
      <param name="maxPlayers">The maximum number of players permitted in the match.</param>
      <param name="playerName">A name for the local player in the match (uniqueness not enforced).</param>
      <param name="createReplicaDelegate">Called when a new entity needs to be instantiated into the match.</param>
      <param name="removeReplicaDelegate">Called when an entity leave the match.</param>
      <typeparam name="T">The type of the match controller.</typeparam>
      <returns>A new match.</returns>
    </member>
    <member name="M:Badumna.Match.Facade.FindMatches(Badumna.Match.MatchmakingCriteria,Badumna.Match.MatchmakingResultHandler)">
      <summary>
            Query the matchmaking server to find matches available to join.
            </summary>
      <param name="criteria">Matchmaking criteria.</param>
      <param name="resultHandler">A delegate for handling the matchmaking query result.</param>
    </member>
    <member name="M:Badumna.Match.Facade.JoinMatch(Badumna.Match.MatchmakingResult,System.String,Badumna.Match.CreateReplica,Badumna.Match.RemoveReplica)">
      <summary>
            Join a known match.
            </summary>
      <param name="matchmakingResult">A match obtained by querying the matchmaking server.</param>
      <param name="playerName">A name for the local player in the match (uniqueness not enforced).</param>
      <param name="createReplicaDelegate">Called when a new entity needs to be instantiated into the match.</param>
      <param name="removeReplicaDelegate">Called when an entity leave the match.</param>
      <returns>A match object for managing the match.</returns>
    </member>
    <member name="M:Badumna.Match.Facade.JoinMatch``1(``0,Badumna.Match.MatchmakingResult,System.String,Badumna.Match.CreateReplica,Badumna.Match.RemoveReplica)">
      <summary>
            Join a known match.
            </summary>
      <param name="controller">The object to use as match controller.</param>
      <param name="matchmakingResult">A match obtained by querying the matchmaking server.</param>
      <param name="playerName">A name for the local player in the match (uniqueness not enforced).</param>
      <param name="createReplicaDelegate">Called when a new entity needs to be instantiated into the match.</param>
      <param name="removeReplicaDelegate">Called when an entity leave the match.</param>
      <typeparam name="T">The type of the match controller.</typeparam>
      <returns>A match object for managing the match.</returns>
    </member>
    <member name="T:Badumna.Match.HostAuthorizationCertificate">
      <summary>
            Issued by the matchmaking server that a known peer is authorized to act
            as host for a given match.
            </summary>
    </member>
    <member name="M:Badumna.Match.HostAuthorizationCertificate.#ctor(Badumna.DataTypes.BadumnaId,Badumna.DataTypes.BadumnaId,System.TimeSpan)">
      <summary>
            Initializes a new instance of the HostAuthorizationCertificate class.
            </summary>
      <param name="matchIdentifier">A unique identifier for the match.</param>
      <param name="host">An authorized host for the match.</param>
      <param name="timestamp">The time the certificate was issued.</param>
    </member>
    <member name="M:Badumna.Match.HostAuthorizationCertificate.AppliesToSameMatch(Badumna.Match.HostAuthorizationCertificate)">
      <summary>
            Checks that another certificate is for the same match as this one.
            </summary>
      <param name="certificate">The other certificate to test.</param>
      <returns>
        <c>true</c> if this certificate is for the given match,
            otherwise <c>false</c>.</returns>
    </member>
    <member name="P:Badumna.Match.HostAuthorizationCertificate.Empty">
      <summary>
            Gets an empty certificate.
            </summary>
    </member>
    <member name="P:Badumna.Match.HostAuthorizationCertificate.Host">
      <summary>
            Gets the authorized host for the match.
            </summary>
    </member>
    <member name="M:Badumna.Match.HostAuthorizationCertificate.IsNotOutrankedBy(Badumna.Match.HostAuthorizationCertificate)">
      <summary>
            Checks that this certificate is not outranked by another given certificate.
            </summary>
      <param name="certificate">The other certificate.</param>
      <returns>
        <c>true</c> if this certificate is not outranked by the other one,
            otherwise <c>false</c>.</returns>
    </member>
    <member name="P:Badumna.Match.HostAuthorizationCertificate.MatchIdentifier">
      <summary>
            Gets the unique identifier for the match.
            </summary>
    </member>
    <member name="P:Badumna.Match.HostAuthorizationCertificate.Timestamp">
      <summary>
            Gets the rank with which the host is assigned to the match.
            </summary>
    </member>
    <member name="T:Badumna.Match.Match">
      <summary>
            Represents a match for a finite set of players.
            </summary>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnOriginal(Badumna.Autoreplication.Serialization.RpcSignature)">
      <summary>
            Remotely call a method on the original of a given replica.
            </summary>
      <param name="method">The replica's method.</param>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnOriginal``1(Badumna.Autoreplication.Serialization.RpcSignature{``0},``0)">
      <summary>
            Remotely call a method on the original of a given replica.
            </summary>
      <param name="method">The replica's method.</param>
      <param name="arg1">The first parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnOriginal``2(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1},``0,``1)">
      <summary>
            Remotely call a method on the original of a given replica.
            </summary>
      <param name="method">The replica's method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnOriginal``3(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2},``0,``1,``2)">
      <summary>
            Call a method on all the original of a given replica.
            </summary>
      <param name="method">The corresponding method on the replica.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnOriginal``4(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3},``0,``1,``2,``3)">
      <summary>
            Call a method on all the original of a given replica.
            </summary>
      <param name="method">The corresponding method on the replica.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnOriginal``5(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
      <summary>
            Call a method on all the original of a given replica.
            </summary>
      <param name="method">The corresponding method on the replica.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnOriginal``6(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
      <summary>
            Call a method on all the original of a given replica.
            </summary>
      <param name="method">The corresponding method on the replica.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <param name="arg6">The sixth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
      <typeparam name="T6">The type of the method's sixth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnReplicas(Badumna.Autoreplication.Serialization.RpcSignature)">
      <summary>
            Remotely call a method on all the replicas of a given original.
            </summary>
      <param name="method">The method on the original.</param>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnReplicas``1(Badumna.Autoreplication.Serialization.RpcSignature{``0},``0)">
      <summary>
            Remotely call a method on all the replicas of a given original.
            </summary>
      <param name="method">The method on the original.</param>
      <param name="arg1">The parameter.</param>
      <typeparam name="T1">The type of the method's parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnReplicas``2(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1},``0,``1)">
      <summary>
            Remotely call a method on all the replicas of a given original.
            </summary>
      <param name="method">The method on the original.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnReplicas``3(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2},``0,``1,``2)">
      <summary>
            Call a method on all the replicas of a given original.
            </summary>
      <param name="method">The corresponding method on the original.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnReplicas``4(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3},``0,``1,``2,``3)">
      <summary>
            Call a method on all the replicas of a given original.
            </summary>
      <param name="method">The corresponding method on the original.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnReplicas``5(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
      <summary>
            Call a method on all the replicas of a given original.
            </summary>
      <param name="method">The corresponding method on the original.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match.CallMethodOnReplicas``6(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
      <summary>
            Remotely call a method on all the replicas of a given original.
            </summary>
      <param name="method">The corresponding method on the original.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <param name="arg6">The sixth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
      <typeparam name="T6">The type of the method's sixth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match.Chat(Badumna.Match.MemberIdentity,System.String)">
      <summary>
            Send a chat message to other members of the match.
            </summary>
      <param name="member">The member to send the message to.</param>
      <param name="message">The message to send.</param>
    </member>
    <member name="M:Badumna.Match.Match.Chat(System.String)">
      <summary>
            Send a chat message to all other members of the match.
            </summary>
      <param name="message">The message to send.</param>
    </member>
    <member name="E:Badumna.Match.Match.ChatMessageReceived">
      <summary>
            Occurs when a chat message is received.
            </summary>
    </member>
    <member name="P:Badumna.Match.Match.ControllerEntity">
      <summary>
            Gets the controller entity.
            </summary>
    </member>
    <member name="P:Badumna.Match.Match.Error">
      <summary>
            Gets the error, if the match has failed.
            </summary>
    </member>
    <member name="M:Badumna.Match.Match.Leave">
      <summary>
            Close the match after use to free resources.
            TODO: Use IDisposable instead/as well?
            </summary>
    </member>
    <member name="P:Badumna.Match.Match.MatchIdentifier">
      <summary>
            Gets the unique ID of the match.
            </summary>
    </member>
    <member name="E:Badumna.Match.Match.MemberAdded">
      <summary>
            Occurs when a new member has joined the match.
            </summary>
    </member>
    <member name="P:Badumna.Match.Match.MemberCount">
      <summary>
            Gets the count of members in the match.
            </summary>
    </member>
    <member name="P:Badumna.Match.Match.MemberIdentity">
      <summary>
            Gets the identity of the local member.
            </summary>
    </member>
    <member name="E:Badumna.Match.Match.MemberRemoved">
      <summary>
            Occurs when an existing member has left the match.
            </summary>
    </member>
    <member name="P:Badumna.Match.Match.Members">
      <summary>
            Gets the current members of the match.
            </summary>
    </member>
    <member name="M:Badumna.Match.Match.RegisterEntity(System.Object,System.UInt32)">
      <summary>
            Register an original entity into a match.
            </summary>
      <param name="entity">Entity to be registered.</param>
      <param name="entityType">The entity type.</param>
    </member>
    <member name="M:Badumna.Match.Match.RegisterHostedEntity(System.Object,System.UInt32)">
      <summary>
            Register a hosted entity into a match.
            </summary>
      <param name="entity">Entity to be registered.</param>
      <param name="entityType">The entity type.</param>
    </member>
    <member name="P:Badumna.Match.Match.State">
      <summary>
            Gets the current state of the match.
            </summary>
    </member>
    <member name="E:Badumna.Match.Match.StateChanged">
      <summary>
            Occurs when the match state has changed.
            </summary>
    </member>
    <member name="M:Badumna.Match.Match.UnregisterEntity(System.Object)">
      <summary>
            Unregister an original entity from a match.
            </summary>
      <param name="entity">Entity to be unregistered.</param>
    </member>
    <member name="M:Badumna.Match.Match.UnregisterHostedEntity(System.Object)">
      <summary>
            Unregister a hosted entity from a match.
            </summary>
      <param name="entity">Entity to be unregistered.</param>
    </member>
    <member name="T:Badumna.Match.Match`1">
      <summary>
            Represents a match with a controller for a finite set of players.
            </summary>
      <typeparam name="T">The type of the object used as the match controller.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnHost(Badumna.Autoreplication.Serialization.RpcSignature)">
      <summary>
            Remotely call a controller method on the current match host.
            </summary>
      <param name="method">The controller method.</param>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnHost``1(Badumna.Autoreplication.Serialization.RpcSignature{``0},``0)">
      <summary>
            Remotely call a controller method on the current match host.
            </summary>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnHost``2(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1},``0,``1)">
      <summary>
            Remotely call a controller method on the current match host.
            </summary>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnHost``3(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2},``0,``1,``2)">
      <summary>
            Remotely call a controller method on the current match host.
            </summary>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnHost``4(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3},``0,``1,``2,``3)">
      <summary>
            Remotely call a controller method on the current match host.
            </summary>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnHost``5(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
      <summary>
            Remotely call a controller method on the current match host.
            </summary>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnHost``6(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
      <summary>
            Remotely call a controller method on the current match host.
            </summary>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <param name="arg6">The sixth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
      <typeparam name="T6">The type of the method's sixth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMember(Badumna.Match.MemberIdentity,Badumna.Autoreplication.Serialization.RpcSignature)">
      <summary>
            Remotely call a controller method on a given member of the match.
            </summary>
      <param name="memberIdentity">The identity of the member to call the member on.</param>
      <param name="method">The controller method.</param>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMember``1(Badumna.Match.MemberIdentity,Badumna.Autoreplication.Serialization.RpcSignature{``0},``0)">
      <summary>
            Remotely call a controller method on a given member of the match.
            </summary>
      <param name="memberIdentity">The identity of the member to call the member on.</param>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMember``2(Badumna.Match.MemberIdentity,Badumna.Autoreplication.Serialization.RpcSignature{``0,``1},``0,``1)">
      <summary>
            Remotely call a controller method on a given member of the match.
            </summary>
      <param name="memberIdentity">The identity of the member to call the member on.</param>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMember``3(Badumna.Match.MemberIdentity,Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2},``0,``1,``2)">
      <summary>
            Remotely call a controller method on a given member of the match.
            </summary>
      <param name="memberIdentity">The identity of the member to call the member on.</param>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMember``4(Badumna.Match.MemberIdentity,Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3},``0,``1,``2,``3)">
      <summary>
            Remotely call a controller method on a given member of the match.
            </summary>
      <param name="memberIdentity">The identity of the member to call the member on.</param>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMember``5(Badumna.Match.MemberIdentity,Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
      <summary>
            Remotely call a controller method on a given member of the match.
            </summary>
      <param name="memberIdentity">The identity of the member to call the member on.</param>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMember``6(Badumna.Match.MemberIdentity,Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
      <summary>
            Remotely call a controller method on a given member of the match.
            </summary>
      <param name="memberIdentity">The identity of the member to call the member on.</param>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <param name="arg6">The sixth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
      <typeparam name="T6">The type of the method's sixth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMembers(Badumna.Autoreplication.Serialization.RpcSignature)">
      <summary>
            Remotely call a controller method on all the other members of the match.
            </summary>
      <param name="method">The method on the original.</param>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMembers``1(Badumna.Autoreplication.Serialization.RpcSignature{``0},``0)">
      <summary>
            Remotely call a controller method on all the other members of the match.
            </summary>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMembers``2(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1},``0,``1)">
      <summary>
            Remotely call a controller method on all the other members of the match.
            </summary>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMembers``3(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2},``0,``1,``2)">
      <summary>
            Remotely call a controller method on all the other members of the match.
            </summary>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMembers``4(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3},``0,``1,``2,``3)">
      <summary>
            Remotely call a controller method on all the other members of the match.
            </summary>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMembers``5(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
      <summary>
            Remotely call a controller method on all the other members of the match.
            </summary>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
    </member>
    <member name="M:Badumna.Match.Match`1.CallMethodOnMembers``6(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
      <summary>
            Remotely call a controller method on all the other members of the match.
            </summary>
      <param name="method">The controller method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <param name="arg6">The sixth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
      <typeparam name="T6">The type of the method's sixth parameter.</typeparam>
    </member>
    <member name="P:Badumna.Match.Match`1.Controller">
      <summary>
            Gets the match controller.
            </summary>
    </member>
    <member name="T:Badumna.Match.MatchCapacity">
      <summary>
            Match status sent to server from host.
            </summary>
    </member>
    <member name="M:Badumna.Match.MatchCapacity.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the MatchCapacity struct.
            </summary>
      <param name="numSlots">The number of players who can be in the match.</param>
      <param name="emptySlots">The number of empty places for players.</param>
    </member>
    <member name="P:Badumna.Match.MatchCapacity.EmptySlots">
      <summary>
            Gets or sets the number of empty places for players.
            </summary>
    </member>
    <member name="P:Badumna.Match.MatchCapacity.NumSlots">
      <summary>
            Gets the number of players who can be in the match.
            </summary>
    </member>
    <member name="T:Badumna.Match.MatchChatEventArgs">
      <summary>
            Provides data for chat events.
            </summary>
    </member>
    <member name="M:Badumna.Match.MatchChatEventArgs.#ctor(System.String,Badumna.Match.MemberIdentity,Badumna.Match.ChatType)">
      <summary>
            Initializes a new instance of the MatchChatEventArgs struct.
            </summary>
      <param name="message">The message text.</param>
      <param name="sender">The member who sent the messge.</param>
      <param name="type">The type of message.</param>
    </member>
    <member name="P:Badumna.Match.MatchChatEventArgs.Message">
      <summary>
            Gets the text of the message.
            </summary>
    </member>
    <member name="P:Badumna.Match.MatchChatEventArgs.Sender">
      <summary>
            Gets the member that sent the message.
            </summary>
    </member>
    <member name="P:Badumna.Match.MatchChatEventArgs.Type">
      <summary>
            Gets the type of message.
            </summary>
    </member>
    <member name="T:Badumna.Match.MatchError">
      <summary>
            Enumeration of possible match errors.
            </summary>
    </member>
    <member name="F:Badumna.Match.MatchError.None">
      <summary>
            No error encountered.
            </summary>
    </member>
    <member name="F:Badumna.Match.MatchError.CannotConnectToHost">
      <summary>
            This peer is unable to connect to the host.
            </summary>
    </member>
    <member name="F:Badumna.Match.MatchError.MatchFull">
      <summary>
            This peer is unable to join the match because it is full.
            </summary>
    </member>
    <member name="F:Badumna.Match.MatchError.CannotConnectToMatchmaker">
      <summary>
            This peer is unable to connect to the matchmaker.
            </summary>
    </member>
    <member name="T:Badumna.Match.MatchmakingCriteria">
      <summary>
            Criteria used for matchmaking.
            </summary>
    </member>
    <member name="P:Badumna.Match.MatchmakingCriteria.MatchName">
      <summary>
            Gets or sets the match name.
            </summary>
    </member>
    <member name="P:Badumna.Match.MatchmakingCriteria.PlayerGroup">
      <summary>
            Gets or sets the player group.
            </summary>
    </member>
    <member name="M:Badumna.Match.MatchmakingCriteria.Satisfies(Badumna.Match.MatchmakingCriteria)">
      <summary>
            Returns a value indicating whether this set of criteria satisfy the desired criteria.
            </summary>
      <param name="desired">The desired criteria</param>
      <returns>
        <c>true</c> iff the desired criteria are met</returns>
    </member>
    <member name="T:Badumna.Match.MatchmakingQueryResult">
      <summary>
            The response to a matchmaking query.
            </summary>
    </member>
    <member name="P:Badumna.Match.MatchmakingQueryResult.Error">
      <summary>
            Gets the error returned by the query.
            Will be <see cref="F:Badumna.Match.MatchError.None" /> if the query was successful.
            </summary>
    </member>
    <member name="P:Badumna.Match.MatchmakingQueryResult.Results">
      <summary>
            Gets the matchmaking results.
            </summary>
    </member>
    <member name="T:Badumna.Match.MatchmakingResult">
      <summary>
            Details of a match reported by the matchmaking system.
            </summary>
    </member>
    <member name="P:Badumna.Match.MatchmakingResult.Capacity">
      <summary>
            Gets the current match status.
            </summary>
    </member>
    <member name="P:Badumna.Match.MatchmakingResult.Certificate">
      <summary>
            Gets the certificate identifying the host.
            </summary>
    </member>
    <member name="P:Badumna.Match.MatchmakingResult.Criteria">
      <summary>
            Gets the matchmaking criteria.
            </summary>
    </member>
    <member name="T:Badumna.Match.MatchmakingResultHandler">
      <summary>
            Delegate for handling matchmaking query results.
            </summary>
      <param name="result">The result of the query, including the error status and matches that met the query.</param>
    </member>
    <member name="T:Badumna.Match.MatchMembershipEventArgs">
      <summary>
            Provides data for a membership events.
            </summary>
    </member>
    <member name="M:Badumna.Match.MatchMembershipEventArgs.#ctor(Badumna.Match.MemberIdentity)">
      <summary>
            Initializes a new instance of the MatchMembershipEventArgs struct.
            </summary>
      <param name="member">The member that changed.</param>
    </member>
    <member name="P:Badumna.Match.MatchMembershipEventArgs.Member">
      <summary>
            Gets the member that changed.
            </summary>
    </member>
    <member name="T:Badumna.Match.MatchStateHandler">
      <summary>
            Delegate for match status updates.
            </summary>
      <param name="state">The status update.</param>
      <param name="error">Any error.</param>
    </member>
    <member name="T:Badumna.Match.MatchStatus">
      <summary>
            Enumeration of possible states of the match.
            </summary>
    </member>
    <member name="F:Badumna.Match.MatchStatus.Initializing">
      <summary>
            Default state on match creation.
            </summary>
    </member>
    <member name="F:Badumna.Match.MatchStatus.Hosting">
      <summary>
            The match is currently being hosted on this peer.
            </summary>
    </member>
    <member name="F:Badumna.Match.MatchStatus.Connected">
      <summary>
            This peer is currently connected to the match host.
            </summary>
    </member>
    <member name="F:Badumna.Match.MatchStatus.Connecting">
      <summary>
            This peer is trying to connect to the match host.
            </summary>
    </member>
    <member name="F:Badumna.Match.MatchStatus.Closed">
      <summary>
            The match has been closed.
            </summary>
    </member>
    <member name="T:Badumna.Match.MatchStatusEventArgs">
      <summary>
            Provides data for a StatusChanged event.
            </summary>
    </member>
    <member name="M:Badumna.Match.MatchStatusEventArgs.#ctor(Badumna.Match.MatchStatus)">
      <summary>
            Initializes a new instance of the MatchStatusEventArgs struct.
            </summary>
      <param name="status">The new status.</param>
    </member>
    <member name="M:Badumna.Match.MatchStatusEventArgs.#ctor(Badumna.Match.MatchStatus,Badumna.Match.MatchError)">
      <summary>
            Initializes a new instance of the MatchStatusEventArgs struct.
            </summary>
      <param name="status">The new status.</param>
      <param name="error">The error.</param>
    </member>
    <member name="P:Badumna.Match.MatchStatusEventArgs.Error">
      <summary>
            Gets any error encountered.
            </summary>
    </member>
    <member name="P:Badumna.Match.MatchStatusEventArgs.Status">
      <summary>
            Gets the new status.
            </summary>
    </member>
    <member name="T:Badumna.Match.MemberIdentity">
      <summary>
            Represents match member identify data, including an ID and a name.
            </summary>
    </member>
    <member name="M:Badumna.Match.MemberIdentity.Equals(Badumna.DataTypes.BadumnaId)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <param name="other">
                    An object to compare with this object.
                </param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
    </member>
    <member name="M:Badumna.Match.MemberIdentity.Equals(Badumna.Match.MemberIdentity)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <param name="other">
                    An object to compare with this object.
                </param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
    </member>
    <member name="M:Badumna.Match.MemberIdentity.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <param name="obj">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="obj" /> parameter is null.
                </exception>
    </member>
    <member name="M:Badumna.Match.MemberIdentity.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="P:Badumna.Match.MemberIdentity.Name">
      <summary>
            Gets a name chosen by the member. Uniqueness not enforced.
            </summary>
    </member>
    <member name="M:Badumna.Match.MemberIdentity.op_Equality(Badumna.DataTypes.BadumnaId,Badumna.Match.MemberIdentity)" />
    <member name="M:Badumna.Match.MemberIdentity.op_Equality(Badumna.Match.MemberIdentity,Badumna.DataTypes.BadumnaId)" />
    <member name="M:Badumna.Match.MemberIdentity.op_Equality(Badumna.Match.MemberIdentity,Badumna.Match.MemberIdentity)" />
    <member name="M:Badumna.Match.MemberIdentity.op_Inequality(Badumna.DataTypes.BadumnaId,Badumna.Match.MemberIdentity)" />
    <member name="M:Badumna.Match.MemberIdentity.op_Inequality(Badumna.Match.MemberIdentity,Badumna.DataTypes.BadumnaId)" />
    <member name="M:Badumna.Match.MemberIdentity.op_Inequality(Badumna.Match.MemberIdentity,Badumna.Match.MemberIdentity)" />
    <member name="M:Badumna.Match.MemberIdentity.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="T:Badumna.Match.RemoveReplica">
      <summary>
            A delegate called by the network layer when an entity leaves the match.
            This delegate gives the application layer the opportunity to cleanup any references to the given replica. It indicates
            that no more updates or custom messages will arrive for this replica.
            </summary>
      <param name="match">The match the entity belongs to.</param>
      <param name="source">The source of the entity (peer or host).</param>
      <param name="replica">The replica being removed.</param>
    </member>
    <member name="T:Badumna.Matchmaking.HandleMatchmakingProgress">
      <summary>
            Matchmaking progress delegate is called to notify the user with the current request progress.
            </summary>
      <param name="update">The progress update.</param>
    </member>
    <member name="T:Badumna.Matchmaking.HandleMatchmakingResult">
      <summary>
            HandleMatchmakingSuccess delegate will be called when the matchmaking completes.
            </summary>
      <param name="result">The MatchmakingAsyncResult.</param>
    </member>
    <member name="T:Badumna.Matchmaking.MatchmakingAsyncResult">
      <summary>
            Asynchronous result of a `BeginMatchmaking` call.
            </summary>
    </member>
    <member name="M:Badumna.Matchmaking.MatchmakingAsyncResult.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Matchmaking.MatchmakingAsyncResult" /> class.
            </summary>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingAsyncResult.AsyncState">
      <summary>
                    Gets a user-defined object that qualifies or contains information about an asynchronous operation.
                </summary>
      <returns>
                    A user-defined object that qualifies or contains information about an asynchronous operation.
                </returns>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingAsyncResult.AsyncWaitHandle">
      <summary>
                    Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.
                </summary>
      <returns>
                    A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.
                </returns>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingAsyncResult.CompletedSynchronously">
      <summary>
                    Gets a value that indicates whether the asynchronous operation completed synchronously.
                </summary>
      <returns>true if the asynchronous operation completed synchronously; otherwise, false.
                </returns>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingAsyncResult.Error">
      <summary>
            Gets the error if the operation failed, otherwise <c>null</c>.
            </summary>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingAsyncResult.IsCompleted">
      <summary>
                    Gets a value that indicates whether the asynchronous operation has completed.
                </summary>
      <returns>true if the operation is complete; otherwise, false.
                </returns>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingAsyncResult.Match">
      <summary>
            Gets a successful match result.
            </summary>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingAsyncResult.Succeeded">
      <summary>
            Gets a value indicating whether this <see cref="T:Badumna.Matchmaking.MatchmakingAsyncResult" /> succeeded.
            </summary>
    </member>
    <member name="T:Badumna.Matchmaking.MatchmakingError">
      <summary>
            Errors that may cause a Matchmaking request to fail.
            </summary>
    </member>
    <member name="F:Badumna.Matchmaking.MatchmakingError.ConnectionFailed">
      <summary>
            The connection to the matchmaking server failed
            </summary>
    </member>
    <member name="F:Badumna.Matchmaking.MatchmakingError.Timeout">
      <summary>
            The request timed out before a match was made
            </summary>
    </member>
    <member name="T:Badumna.Matchmaking.MatchmakingOperation">
      <summary>
            An enum describing possible update events in a Matchmaking request.
            </summary>
    </member>
    <member name="F:Badumna.Matchmaking.MatchmakingOperation.ConnectionEstablished">
      <summary>
            A connection to the matchmaking server has been made
            </summary>
    </member>
    <member name="F:Badumna.Matchmaking.MatchmakingOperation.RequestSent">
      <summary>
            The matchamking request has been sent
            </summary>
    </member>
    <member name="F:Badumna.Matchmaking.MatchmakingOperation.PlayerAdded">
      <summary>
            A player has been added to the match
            </summary>
    </member>
    <member name="F:Badumna.Matchmaking.MatchmakingOperation.PlayerRemoved">
      <summary>
            A player has been removed from the match
            </summary>
    </member>
    <member name="T:Badumna.Matchmaking.MatchmakingOptions">
      <summary>
            Matchmaking manager handle the matchmaking request from the client and passes to the matchmaking server.
            </summary>
    </member>
    <member name="M:Badumna.Matchmaking.MatchmakingOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Matchmaking.MatchmakingOptions" /> class.
            </summary>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingOptions.MaximumPlayers">
      <summary>
            Gets or sets the maximum players on the match.
            </summary>
      <exception cref="T:System.ArgumentException">Argument exception will be thrown if the value is not between 2 and 50.</exception>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingOptions.MinimumPlayers">
      <summary>
            Gets or sets the minimum players on the match.
            </summary>
      <exception cref="T:System.ArgumentException">Argument exception will be thrown if the value is not between 2 and 50.</exception>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingOptions.PlayerAttributes">
      <summary>
            Gets or sets the player attributes.
            <para>
            PlayerAttribute property is used to mask different player's role on the game.
            This property will be ignored if it has a value of 0.
            It uses 32 bit mask with bitwise OR logic, a match will be started if the resulting players attributes on the match is 0xFFFFFFFF.
            This property is useful when player's role is important in a match.
            For an example, in a chess match, one player have to play white pieces and the other play black pieces.
            </para></summary>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingOptions.PlayerGroup">
      <summary>
            Gets or sets the player group.
            <para>
            PlayerGroup property is used to divide the players into smaller groups, only players with the same player group can be matched together.
            This property will be ignored if it has a value of 0.
            This property is useful to group players based on the skill level, different type of matches, different type of game maps, etc. 
            </para></summary>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingOptions.Timeout">
      <summary>
            Gets or sets the matchmaking timeout.
            </summary>
      <exception cref="T:System.ArgumentException">Argument exception will be thrown if the value is not between 10 seconds and 15 minutes.</exception>
    </member>
    <member name="M:Badumna.Matchmaking.MatchmakingOptions.Validate">
      <summary>
            Requesting a matchmaking to matchmaking server.
            </summary>
    </member>
    <member name="T:Badumna.Matchmaking.MatchmakingProgressEvent">
      <summary>
            Matchmaking progress event is used to pass the progress info from the server to client.
            </summary>
    </member>
    <member name="M:Badumna.Matchmaking.MatchmakingProgressEvent.#ctor(System.IO.BinaryReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Matchmaking.MatchmakingProgressEvent" /> class.
            </summary>
      <param name="reader">The binary reader.</param>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingProgressEvent.Operation">
      <summary>
            Gets the operation that has occurred.
            </summary>
    </member>
    <member name="M:Badumna.Matchmaking.MatchmakingProgressEvent.Serialize(System.IO.BinaryWriter)">
      <summary>
            Serialize the class.
            </summary>
      <param name="writer"> The Binary writer.</param>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingProgressEvent.Subject">
      <summary>
            Gets the name of the subject of this update.
            </summary>
    </member>
    <member name="M:Badumna.Matchmaking.MatchmakingProgressEvent.ToString">
      <summary>
            Returns a human-readable description of the update.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:Badumna.Matchmaking.MatchmakingResult">
      <summary>
            The result of a successful Matchmaking request
            </summary>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingResult.ExpectedPlayers">
      <summary>
            Gets the number of expected players.
            </summary>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingResult.PlayerId">
      <summary>
            Gets the id (between 0 and ExpectedPlayers) assigned to the current player.
            </summary>
    </member>
    <member name="P:Badumna.Matchmaking.MatchmakingResult.RoomId">
      <summary>
            Gets the room id.
            </summary>
    </member>
    <member name="M:Badumna.Matchmaking.MatchmakingResult.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="T:Badumna.Replication.CreateReplica">
      <summary>
            A delegate called by the network layer when a new replica arrives.  The delegate should
            return an instance of IReplica to which remote updates and custom messages will be applied.
            </summary>
      <param name="entityId">The id of the new entity</param>
      <param name="entityType">The application specific type ID that was associated with this
            entity when the entity was registered on the owning peer.</param>
      <returns>An instance of the new entity</returns>
    </member>
    <member name="T:Badumna.Replication.EntityTypeId">
      <summary>
            A class that represents an application specific grouping of entity types, allowing the easy
            categorization of remote entities.
            </summary>
    </member>
    <member name="M:Badumna.Replication.EntityTypeId.#ctor(System.Byte,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Replication.EntityTypeId" /> struct from the given group and id.
            </summary>
      <param name="group">The group</param>
      <param name="id">The id</param>
    </member>
    <member name="P:Badumna.Replication.EntityTypeId.Group">
      <summary>
            Gets the group.
            </summary>
    </member>
    <member name="P:Badumna.Replication.EntityTypeId.Id">
      <summary>
            Gets the id.
            </summary>
    </member>
    <member name="M:Badumna.Replication.EntityTypeId.ToString">
      <summary>
                    Returns the fully qualified type name of this instance.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing a fully qualified type name.
                </returns>
    </member>
    <member name="T:Badumna.Replication.IEntity">
      <summary>
            A collection of properties common to entities.
            </summary>
    </member>
    <member name="P:Badumna.Replication.IEntity.Guid">
      <summary>
            Gets or sets a network wide identifier for the entity.
            </summary>
    </member>
    <member name="M:Badumna.Replication.IEntity.HandleEvent(System.IO.Stream)">
      <summary>
            Process an event sent to this entity by a call to, e.g.,
            NetworkFacade.SendCustomMessageToRemoteCopies().
            </summary>
      <param name="stream">A stream containing the serialized event data</param>
    </member>
    <member name="T:Badumna.Replication.IOriginal">
      <summary>
            To be implemented by classes representing the original instance of an entity.
            </summary>
    </member>
    <member name="M:Badumna.Replication.IOriginal.Serialize(Badumna.Utilities.BooleanArray,System.IO.Stream)">
      <summary>
            Serializes the specified required parts
            </summary>
      <param name="requiredParts">The required parts.  This parameter can be mutated and on
            exit should indicate the parts actually included.</param>
      <param name="stream">The stream to which the required parts are serialized.</param>
      <returns>A BooleanArray indicating any parts the entity has left to serialize.
            Generally the implementation should serialize all requiredParts onto the stream in one
            go and return a BooleanArray will all bits false.</returns>
    </member>
    <member name="T:Badumna.Replication.IReplica">
      <summary>
            To be implemented by classes representing remote instances of an entity.
            </summary>
    </member>
    <member name="M:Badumna.Replication.IReplica.Deserialize(Badumna.Utilities.BooleanArray,System.IO.Stream,System.Int32,Badumna.DataTypes.BadumnaId)">
      <summary>
            Deserialize the entity state from the given stream.
            </summary>
      <param name="includedParts">An array of values indicating which parts are included in
            the stream.</param>
      <param name="stream">The data to be deserialized.</param>
      <param name="estimatedMillisecondsSinceDeparture">To do: documentation.</param>
      <param name="id">An ID used to uniquely identify the entity.</param>
      <returns>An attention value between 0.0 (no attention) and 1.0 (maximum attention). This
            is used to prioritize future updates to this replica.</returns>
    </member>
    <member name="T:Badumna.Replication.RemoveReplica">
      <summary>
            A delegate called by the network layer when a replica is to be removed. This delegate gives
            the application layer the opportunity to cleanup any references to the given replica. It
            indicates that no more updates or custom messages will arrive for this replica.
            </summary>
      <param name="replica">The replica being removed.</param>
    </member>
    <member name="T:Badumna.Security.Character">
      <summary>
        <para>
            A character is the externally-visible identity of a logged in user. It consists of a name and a persistent ID.
            When users interact with each other using character-based services (such as private chat), each participant
            is represented by a Character.
            </para>
        <para>
            A user can have any number of characters, but acts as only one character at a time (selected at login).
            If an application makes use of a Dei server for secure login,
            character names and IDs are guaranteed to be unique, and character ownership is verified when communicating
            with peers (i.e. a user cannot masquerade as someone else's character).
            </para>
        <para>
            If an application uses the <see cref="T:Badumna.Security.UnverifiedIdentityProvider" /> class for login to the
            badumna network, no guarantees are made about the uniqueness or validity of character names and IDs.
            </para>
      </summary>
    </member>
    <member name="M:Badumna.Security.Character.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Security.Character" /> class.
            Not indended to be called by user code, used only for deserialization.
            </summary>
    </member>
    <member name="M:Badumna.Security.Character.#ctor(System.Int64,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Security.Character" /> class.
            </summary>
      <param name="id">The character id.</param>
      <param name="name">The character name.</param>
    </member>
    <member name="M:Badumna.Security.Character.Equals(Badumna.Security.Character)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <param name="other">
                    An object to compare with this object.
                </param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
    </member>
    <member name="M:Badumna.Security.Character.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <param name="obj">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="obj" /> parameter is null.
                </exception>
    </member>
    <member name="M:Badumna.Security.Character.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="P:Badumna.Security.Character.Id">
      <summary>
            Gets or sets the id.
            </summary>
    </member>
    <member name="P:Badumna.Security.Character.IsValid">
      <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
    </member>
    <member name="P:Badumna.Security.Character.Name">
      <summary>
            Gets or sets the name.
            </summary>
    </member>
    <member name="F:Badumna.Security.Character.None">
      <summary>
            The null character, which can be used by servers and other peers
            which do not need to use any character-related services.
            </summary>
    </member>
    <member name="M:Badumna.Security.Character.op_Equality(Badumna.Security.Character,Badumna.Security.Character)" />
    <member name="M:Badumna.Security.Character.op_Inequality(Badumna.Security.Character,Badumna.Security.Character)" />
    <member name="M:Badumna.Security.Character.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="T:Badumna.Security.IIdentityProvider">
      <summary>
            Identity providers expose a mechanism for the Badumna library to obtain tokens required for various types of
            operations. Classes implementing this interface can be passed to the NetworkFacade.Login method.
            </summary>
    </member>
    <member name="M:Badumna.Security.IIdentityProvider.Activate">
      <summary>
            Activates this instance, triggering (for example) periodic token refresh.
            </summary>
    </member>
    <member name="M:Badumna.Security.IIdentityProvider.Dispose">
      <summary>
            Disposes of any resources or background tasks managed by this instance.
            </summary>
    </member>
    <member name="M:Badumna.Security.IIdentityProvider.GetNetworkParticipationToken">
      <summary>
            Provide a token that permits the local peer to send and receive messages from other peers.
            </summary>
      <returns>A SymmetricKeyToken providing the unique session key for the network</returns>
    </member>
    <member name="M:Badumna.Security.IIdentityProvider.GetPermissionListToken">
      <summary>
            Provide a token that holds the permissions for the current user. Each permission should be signed using the trusted authorities
            private key.
            </summary>
      <returns>A PermissionListoken</returns>
    </member>
    <member name="M:Badumna.Security.IIdentityProvider.GetTimeToken">
      <summary>
            Provide a token that holds the current network time. The time is used to check the expiration of other tokens.
            Time should be in UTC.
            </summary>
      <returns>A time token</returns>
    </member>
    <member name="M:Badumna.Security.IIdentityProvider.GetTrustedAuthorityToken">
      <summary>
            Provide a token for the trusted authorities public key. The public key will be used to verify that other peer's users 
            are who they claim to be.
            </summary>
      <returns>A TrustedAuthorityToken</returns>
    </member>
    <member name="M:Badumna.Security.IIdentityProvider.GetUserCertificateToken">
      <summary>
            Provide a token that can be used by remote peers to authenticate the the local user. The certificate  
            should be signed using the trusted authorities private key.
            </summary>
      <returns>A CertificateToken</returns>
    </member>
    <member name="T:Badumna.Security.SecurityException">
      <summary>
            An exception indicating an security related problem 
            </summary>
    </member>
    <member name="T:Badumna.Security.UnverifiedIdentityProvider">
      <summary>
            An insecure, unverified identity provider.
            See Dei.IdentityProvider for a secure alternative to this class.
            </summary>
    </member>
    <member name="M:Badumna.Security.UnverifiedIdentityProvider.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Security.UnverifiedIdentityProvider" /> class for the
            given character name.
            
            A private key pair is generated automatically using `UnverifiedIdentityProvider.GenerateKeyPair()`.
            </summary>
      <param name="characterName">Name of the character.</param>
    </member>
    <member name="M:Badumna.Security.UnverifiedIdentityProvider.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Security.UnverifiedIdentityProvider" /> class for the
            given character name.
            </summary>
      <param name="characterName">Name of the character.</param>
      <param name="keyPairXml">The key pair from a previous call to <see cref="M:Badumna.Security.UnverifiedIdentityProvider.GenerateKeyPair" />.</param>
    </member>
    <member name="M:Badumna.Security.UnverifiedIdentityProvider.Activate">
      <summary>
            Activates this instance, triggering (for example) periodic token refresh.
            </summary>
    </member>
    <member name="M:Badumna.Security.UnverifiedIdentityProvider.Dispose">
      <summary>
            Disposes of any resources or background tasks managed by this instance.
            </summary>
    </member>
    <member name="M:Badumna.Security.UnverifiedIdentityProvider.GenerateKeyPair">
      <summary>
            Generates a new RSA key pair and returns an XML string containing a newly generated key pair.
            </summary>
      <returns>Returns an XML string containing a newly generated key pair.</returns>
    </member>
    <member name="M:Badumna.Security.UnverifiedIdentityProvider.GetNetworkParticipationToken">
      <summary>
            Provide a token that permits the local peer to send and receive messages from other peers.
            </summary>
      <returns>A SymmetricKeyToken providing the unique session key for the network</returns>
    </member>
    <member name="M:Badumna.Security.UnverifiedIdentityProvider.GetPermissionListToken">
      <summary>
            Provide a token that holds the permissions for the current user. Each permission should be signed using the trusted authorities
            private key.
            </summary>
      <returns>A PermissionListoken</returns>
    </member>
    <member name="M:Badumna.Security.UnverifiedIdentityProvider.GetTimeToken">
      <summary>
            Provide a token that holds the current network time. The time is used to check the expiration of other tokens.
            Time should be in UTC.
            </summary>
      <returns>A time token</returns>
    </member>
    <member name="M:Badumna.Security.UnverifiedIdentityProvider.GetTrustedAuthorityToken">
      <summary>
            Provide a token for the trusted authorities public key. The public key will be used to verify that other peer's users 
            are who they claim to be.
            </summary>
      <returns>A TrustedAuthorityToken</returns>
    </member>
    <member name="M:Badumna.Security.UnverifiedIdentityProvider.GetUserCertificateToken">
      <summary>
            Provide a token that can be used by remote peers to authenticate the the local user. The certificate  
            should be signed using the trusted authorities private key.
            </summary>
      <returns>A CertificateToken</returns>
    </member>
    <member name="T:Badumna.ServiceDiscovery.ServerType">
      <summary>
            The server types.
            </summary>
    </member>
    <member name="F:Badumna.ServiceDiscovery.ServerType.None">
      <summary>
            The default value used internally.
            </summary>
    </member>
    <member name="F:Badumna.ServiceDiscovery.ServerType.Arbitration">
      <summary>
            Arbitration server.
            </summary>
    </member>
    <member name="F:Badumna.ServiceDiscovery.ServerType.Overload">
      <summary>
            Overload server.
            </summary>
    </member>
    <member name="T:Badumna.ServiceDiscovery.ServiceDescription">
      <summary>
            This class is used to describe the service. 
            </summary>
    </member>
    <member name="M:Badumna.ServiceDiscovery.ServiceDescription.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.ServiceDiscovery.ServiceDescription" /> class.
            </summary>
    </member>
    <member name="M:Badumna.ServiceDiscovery.ServiceDescription.#ctor(Badumna.ServiceDiscovery.ServerType)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.ServiceDiscovery.ServiceDescription" /> class.
            </summary>
      <param name="serverType">Type of the server.</param>
    </member>
    <member name="M:Badumna.ServiceDiscovery.ServiceDescription.#ctor(Badumna.ServiceDiscovery.ServerType,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.ServiceDiscovery.ServiceDescription" /> class.
            </summary>
      <param name="serverType">Type of the server.</param>
      <param name="serviceType">Type of the service.</param>
    </member>
    <member name="M:Badumna.ServiceDiscovery.ServiceDescription.#ctor(Badumna.ServiceDiscovery.ServerType,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.ServiceDiscovery.ServiceDescription" /> class.
            </summary>
      <param name="serverType">Type of the server.</param>
      <param name="serviceType">Type of the service.</param>
      <param name="attribute">The attribute.</param>
    </member>
    <member name="P:Badumna.ServiceDiscovery.ServiceDescription.Attribute">
      <summary>
            Gets or sets the attribute.
            </summary>
    </member>
    <member name="M:Badumna.ServiceDiscovery.ServiceDescription.Equals(Badumna.ServiceDiscovery.ServiceDescription)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:Badumna.ServiceDiscovery.ServiceDescription.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Badumna.ServiceDiscovery.ServiceDescription.HasPreferred">
      <summary>
            Gets a value indicating whether this instance is prefered.
            </summary>
    </member>
    <member name="P:Badumna.ServiceDiscovery.ServiceDescription.ServerType">
      <summary>
            Gets or sets the type of the server.
            </summary>
    </member>
    <member name="P:Badumna.ServiceDiscovery.ServiceDescription.ServiceType">
      <summary>
            Gets or sets the type of the service.
            </summary>
    </member>
    <member name="T:Badumna.SpatialEntities.CreateSpatialReplica">
      <summary>
            A delegate called by the network layer when a new spatial entity arrives within the visible region for a given network scene.
            The delegate should return an instance of <see cref="T:Badumna.SpatialEntities.ISpatialReplica" /> to which remote updates and custom messages will be applied.
            </summary>
      <param name="scene">The instance of the scene in which the new spatial entity has arrived</param>
      <param name="entityId">The id of the new entity</param>
      <param name="entityType">The application level type id that was associated with this entity when the entity was registered on the 
            owning peer.</param>
      <returns>An instance of the new entity</returns>
    </member>
    <member name="T:Badumna.SpatialEntities.IDeadReckonable">
      <summary>
            Indicates the implemented entity should have its position extrapolated and smoothed between updates.
            </summary>
    </member>
    <member name="M:Badumna.SpatialEntities.IDeadReckonable.AttemptMovement(Badumna.DataTypes.Vector3)">
      <summary>
            This method is called on remote copies inside the NetworkFacade.ProcessNetworkState() method.
            The reckonedPosition is the current estimated position of the controlling entity.
            The implementation of this method should check that the new position is valid (i.e. check for collisions etc) and apply it if so. 
            </summary>
      <param name="reckonedPosition">The estimated position of the entity</param>
    </member>
    <member name="P:Badumna.SpatialEntities.IDeadReckonable.Velocity">
      <summary>
            Gets or sets the known velocity of the network entity.
            </summary>
    </member>
    <member name="T:Badumna.SpatialEntities.IReplicableEntity">
      <summary>
            A replicable entity.
            </summary>
    </member>
    <member name="P:Badumna.SpatialEntities.IReplicableEntity.Position">
      <summary>
            Gets or sets the centroid of the entity.
            </summary>
    </member>
    <member name="T:Badumna.SpatialEntities.ISpatialEntity">
      <summary>
            A collection of properties common to spatial entities.
            </summary>
    </member>
    <member name="P:Badumna.SpatialEntities.ISpatialEntity.AreaOfInterestRadius">
      <summary>
            Gets or sets the radius of the entity's sphere of interest.
            </summary>
    </member>
    <member name="P:Badumna.SpatialEntities.ISpatialEntity.Radius">
      <summary>
            Gets or sets the radius of the entity's bounding sphere.
            </summary>
    </member>
    <member name="T:Badumna.SpatialEntities.ISpatialOriginal">
      <summary>
            An original spatial entity.  Original entities are replicated to interested peers.
            </summary>
    </member>
    <member name="M:Badumna.SpatialEntities.ISpatialOriginal.Serialize(Badumna.Utilities.BooleanArray,System.IO.Stream)">
      <summary>
            Serialize the requiredParts of the entity on to the stream.
            </summary>
      <param name="requiredParts">Indicates which parts should be serialized.  Exactly these parts must be written to the stream.</param>
      <param name="stream">The stream to serialize to.  This stream should not be closed.</param>
    </member>
    <member name="T:Badumna.SpatialEntities.ISpatialReplica">
      <summary>
            A replicated entity with position and size.
            </summary>
    </member>
    <member name="M:Badumna.SpatialEntities.ISpatialReplica.Deserialize(Badumna.Utilities.BooleanArray,System.IO.Stream,System.Int32)">
      <summary>
            Deserialize the spatial entity state from the given stream.
            </summary>
      <param name="includedParts">List of parts included in the serialization.</param>
      <param name="stream">Memory stream containing the serialized data.</param>
      <param name="estimatedMillisecondsSinceDeparture">Estimated time since serialization.</param>
    </member>
    <member name="T:Badumna.SpatialEntities.NetworkScene">
      <summary>
            A distinct virtual space that entities exist in.
            </summary>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnOriginal(Badumna.Autoreplication.Serialization.RpcSignature)">
      <summary>
            Remotely call a method on the original of a given replica.
            </summary>
      <param name="method">The replica's method.</param>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnOriginal``1(Badumna.Autoreplication.Serialization.RpcSignature{``0},``0)">
      <summary>
            Remotely call a method on the original of a given replica.
            </summary>
      <param name="method">The replica's method.</param>
      <param name="arg1">The first parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnOriginal``2(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1},``0,``1)">
      <summary>
            Remotely call a method on the original of a given replica.
            </summary>
      <param name="method">The replica's method.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnOriginal``3(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2},``0,``1,``2)">
      <summary>
            Call a method on all the original of a given replica.
            </summary>
      <param name="method">The corresponding method on the replica.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnOriginal``4(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3},``0,``1,``2,``3)">
      <summary>
            Call a method on all the original of a given replica.
            </summary>
      <param name="method">The corresponding method on the replica.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnOriginal``5(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
      <summary>
            Call a method on all the original of a given replica.
            </summary>
      <param name="method">The corresponding method on the replica.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnOriginal``6(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
      <summary>
            Call a method on all the original of a given replica.
            </summary>
      <param name="method">The corresponding method on the replica.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <param name="arg6">The sixth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
      <typeparam name="T6">The type of the method's sixth parameter.</typeparam>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnReplicas(Badumna.Autoreplication.Serialization.RpcSignature)">
      <summary>
            Remotely call a method on all the replicas of a given original.
            </summary>
      <param name="method">The method on the original.</param>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnReplicas``1(Badumna.Autoreplication.Serialization.RpcSignature{``0},``0)">
      <summary>
            Remotely call a method on all the replicas of a given original.
            </summary>
      <param name="method">The method on the original.</param>
      <param name="arg1">The parameter.</param>
      <typeparam name="T1">The type of the method's parameter.</typeparam>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnReplicas``2(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1},``0,``1)">
      <summary>
            Remotely call a method on all the replicas of a given original.
            </summary>
      <param name="method">The method on the original.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnReplicas``3(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2},``0,``1,``2)">
      <summary>
            Call a method on all the replicas of a given original.
            </summary>
      <param name="method">The corresponding method on the original.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnReplicas``4(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3},``0,``1,``2,``3)">
      <summary>
            Call a method on all the replicas of a given original.
            </summary>
      <param name="method">The corresponding method on the original.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnReplicas``5(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
      <summary>
            Call a method on all the replicas of a given original.
            </summary>
      <param name="method">The corresponding method on the original.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.CallMethodOnReplicas``6(Badumna.Autoreplication.Serialization.RpcSignature{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
      <summary>
            Remotely call a method on all the replicas of a given original.
            </summary>
      <param name="method">The corresponding method on the original.</param>
      <param name="arg1">The first parameter.</param>
      <param name="arg2">The second parameter.</param>
      <param name="arg3">The third parameter.</param>
      <param name="arg4">The fourth parameter.</param>
      <param name="arg5">The fifth parameter.</param>
      <param name="arg6">The sixth parameter.</param>
      <typeparam name="T1">The type of the method's first parameter.</typeparam>
      <typeparam name="T2">The type of the method's second parameter.</typeparam>
      <typeparam name="T3">The type of the method's third parameter.</typeparam>
      <typeparam name="T4">The type of the method's fourth parameter.</typeparam>
      <typeparam name="T5">The type of the method's fifth parameter.</typeparam>
      <typeparam name="T6">The type of the method's sixth parameter.</typeparam>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.Leave">
      <summary>
            Depart from the given scene. 
            </summary>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.LeaveImplimentation">
      <summary>
            Derived specialization of the leave scene implementation.
            </summary>
    </member>
    <member name="P:Badumna.SpatialEntities.NetworkScene.MiniScene">
      <summary>
            Gets a value indicating whether the scene is a mini scene.
            </summary>
    </member>
    <member name="P:Badumna.SpatialEntities.NetworkScene.Name">
      <summary>
            Gets the unique name of the scene.
            </summary>
    </member>
    <member name="P:Badumna.SpatialEntities.NetworkScene.Originals">
      <summary>
            Gets the collection of original entities instantiated in this scene on this peer.
            </summary>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.RegisterEntity(Badumna.SpatialEntities.IReplicableEntity,System.UInt32,System.Single,System.Single)">
      <summary>
            Registers the given entity with the scene.
            </summary>
      <param name="entity">The entity to register.</param>
      <param name="entityType">An integer representing the type of the entity.  This integer will be passed to
            the CreateReplica delegate on remote peers.</param>
      <param name="radius">The radius of the entity's bounding sphere.</param>
      <param name="sphereOfInterestRadius">The radius of the entity's sphere of interest.</param>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.RegisterEntity(Badumna.SpatialEntities.ISpatialOriginal,System.UInt32)">
      <summary>
            Registers the given entity with the scene.
            </summary>
      <param name="entity">The entity to register.</param>
      <param name="entityType">An integer representing the type of the entity.  This integer will be passed to
            the CreateReplica delegate on remote peers.</param>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.RegisterEntityImplementation(Badumna.SpatialEntities.ISpatialOriginal,System.UInt32)">
      <summary>
            Registers an entity in the scene.
            </summary>
      <param name="entity">The entity.</param>
      <param name="entityType">Type of the entity.</param>
    </member>
    <member name="P:Badumna.SpatialEntities.NetworkScene.Replicas">
      <summary>
            Gets the collection of remote entities instantiated in this scene on this peer.
            </summary>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.UnregisterEntity(Badumna.SpatialEntities.IReplicableEntity)">
      <summary>
            Unregister the given entity with the scene.
            </summary>
      <param name="entity">The locally owned entity to remove from the current scene.</param>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.UnregisterEntity(Badumna.SpatialEntities.ISpatialOriginal)">
      <summary>
            Unregister the given entity with the scene.
            </summary>
      <param name="entity">The locally owned entity to remove from the current scene.</param>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.UnregisterEntityImplementation(Badumna.SpatialEntities.ISpatialOriginal)">
      <summary>
            Unregisters the entity from the scene.
            </summary>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Badumna.SpatialEntities.NetworkScene.ValidateInterestRadius(Badumna.SpatialEntities.ISpatialOriginal)">
      <summary>
            Check the entity radius an AOI are within limits.
            </summary>
      <param name="entity">The entity.</param>
    </member>
    <member name="T:Badumna.SpatialEntities.RemoveSpatialReplica">
      <summary>
            A delegate called by the network layer when an entity leaves the visible region for a given network scene.
            This delegate gives the application layer the opportunity to cleanup any references to the given replica. It indicates
            that no more updates or custom messages will arrive for this replica.
            </summary>
      <param name="scene">The scene from which the replica is being removed.</param>
      <param name="replica">The replica being removed</param>
    </member>
    <member name="T:Badumna.SpatialEntities.SpatialEntityStateSegment">
      <summary>
            Names for the enity state segment indexes used by the spatial entity system.
            When spatial entities are defined they should start numbering state segments
            from FirstUserSegment onwards (inclusive).
            </summary>
    </member>
    <member name="F:Badumna.SpatialEntities.SpatialEntityStateSegment.Scene">
      <summary>
            Index for state segment holding the scene name
            </summary>
    </member>
    <member name="F:Badumna.SpatialEntities.SpatialEntityStateSegment.Position">
      <summary>
            Index for state segment holding the position
            </summary>
    </member>
    <member name="F:Badumna.SpatialEntities.SpatialEntityStateSegment.Velocity">
      <summary>
            Index for state segment holding the velocity (Only used for IDeadReckonable entities)
            </summary>
    </member>
    <member name="F:Badumna.SpatialEntities.SpatialEntityStateSegment.Radius">
      <summary>
            Index for state segment holding the radius
            </summary>
    </member>
    <member name="F:Badumna.SpatialEntities.SpatialEntityStateSegment.InterestRadius">
      <summary>
            Index for state segment holding the interest radius
            </summary>
    </member>
    <member name="F:Badumna.SpatialEntities.SpatialEntityStateSegment.Match">
      <summary>
            Index for state segment holding the match id.
            </summary>
    </member>
    <member name="F:Badumna.SpatialEntities.SpatialEntityStateSegment.FirstAvailableSegment">
      <summary>
            Index of the first unused state segment index. 
            </summary>
    </member>
    <member name="T:Badumna.Streaming.IStreamController">
      <summary>
            Controls a streaming operation and provides information on its current status.  Used on both sending and receiving end.
            </summary>
    </member>
    <member name="P:Badumna.Streaming.IStreamController.BytesTotal">
      <summary>
            Total bytes to be transferred in the streaming operation.
            </summary>
    </member>
    <member name="P:Badumna.Streaming.IStreamController.BytesTransfered">
      <summary>
            Number of bytes transferred so far.
            </summary>
    </member>
    <member name="M:Badumna.Streaming.IStreamController.Cancel">
      <summary>
            Cancels the streaming operation.
            </summary>
    </member>
    <member name="P:Badumna.Streaming.IStreamController.CurrentState">
      <summary>
            The current state of the streaming operation.
            </summary>
    </member>
    <member name="P:Badumna.Streaming.IStreamController.EstimatedTimeRemaining">
      <summary>
            Estimated time required to complete the streaming operation.
            </summary>
    </member>
    <member name="E:Badumna.Streaming.IStreamController.InformationChanged">
      <summary>
            Triggered when any of the properties on this instance have changed.
            </summary>
    </member>
    <member name="P:Badumna.Streaming.IStreamController.TransferRateKBps">
      <summary>
            Estimated transfer rate in kilobytes / second.
            </summary>
    </member>
    <member name="P:Badumna.Streaming.IStreamController.WasSuccessful">
      <summary>
            True if the streaming operation has completed successfully.
            </summary>
    </member>
    <member name="T:Badumna.Streaming.ReceiveStreamEventArgs">
      <summary>
            Passed to the receive stream event handler when a peer attempts to send a stream to this peer.
            </summary>
    </member>
    <member name="M:Badumna.Streaming.ReceiveStreamEventArgs.AcceptFile(System.String,System.AsyncCallback,System.Object)">
      <summary>
            Accept the request. Copying the file to the given path name.
            </summary>
      <param name="pathName">The full name of the destination file.</param>
      <param name="callback">The completion callback. Called when the transfer has stopped by error or completion</param>
      <param name="callbackState">User defined state object which is passed to the completionCallback.</param>
      <returns>The stream controller, used for controling the transfer operation</returns>
    </member>
    <member name="M:Badumna.Streaming.ReceiveStreamEventArgs.AcceptStream(System.IO.Stream,System.AsyncCallback,System.Object)">
      <summary>
            Accept the request. Streaming to the given stream.
            </summary>
      <param name="stream">The writeable stream to which the output is piped</param>
      <param name="completionCallback">The completion callback. Called when the transfer has stopped by error or completion</param>
      <param name="callbackState">User defined state object which is passed to the completionCallback.</param>
      <returns>The stream controller, used for controling the transfer operation</returns>
    </member>
    <member name="T:Badumna.Streaming.SendStreamEventArgs">
      <summary>
            Passed to the stend stream event handler when a peer requests that this peer send a stream.
            </summary>
    </member>
    <member name="M:Badumna.Streaming.SendStreamEventArgs.AcceptFile(System.String,System.AsyncCallback,System.Object)">
      <summary>
            Accept the request to send the file
            </summary>
      <param name="pathName">The full name of the file to send.</param>
      <param name="callback">The completion callback. Called when the transfer has stopped by error or completion</param>
      <param name="callbackState">User defined state object which is passed to the completionCallback.</param>
      <returns>The stream controller, used for controling the transfer operation</returns>
    </member>
    <member name="M:Badumna.Streaming.SendStreamEventArgs.AcceptStream(System.IO.Stream,System.AsyncCallback,System.Object)">
      <summary>
            Accept the request to send the file
            </summary>
      <param name="stream">The readable stream which is sent to the remote peer.</param>
      <param name="completionCallback">The completion callback. Called when the transfer has stopped by error or completion</param>
      <param name="callbackState">User defined state object which is passed to the completionCallback.</param>
      <returns>The stream controller, used for controling the transfer operation</returns>
    </member>
    <member name="T:Badumna.Streaming.StreamingManager">
      <summary>
            Provides the API for streaming operations.
            </summary>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.BeginRequestReliableFile(System.String,System.String,System.String,Badumna.DataTypes.BadumnaId,System.String,System.AsyncCallback,System.Object)">
      <summary>
            Begin an asynchronous request for a remote file.
            </summary>
      <param name="streamTag">A unique string to differentiate streaming classes.  The handler with the corresponding tag will be invoked on the remote end.</param>
      <param name="fileName">The filename to request from the remote peer</param>
      <param name="destinationPath">The local path to save the requested file</param>
      <param name="source">A BadumnaId specifying the remote peer to request the file from</param>
      <param name="userName">The username associated with the request</param>
      <param name="callback">The callback to be invoked when the streaming operation ends</param>
      <param name="callbackState">User state passed to the callback</param>
      <returns>An IStreamController for monitoring/cancelling the streaming operation.</returns>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.BeginRequestReliableFile(System.String,System.String,System.String,Badumna.SpatialEntities.IReplicableEntity,System.String,System.AsyncCallback,System.Object)">
      <summary>
            Begin an asynchronous request for a remote file.
            </summary>
      <param name="streamTag">A unique string to differentiate streaming classes.  The handler with the corresponding tag will be invoked on the remote end.</param>
      <param name="fileName">The filename to request from the remote peer</param>
      <param name="destinationPath">The local path to save the requested file</param>
      <param name="replica">A replica from the remote peer to request the file from</param>
      <param name="userName">The username associated with the request</param>
      <param name="callback">The callback to be invoked when the streaming operation ends</param>
      <param name="callbackState">User state passed to the callback</param>
      <returns>An IStreamController for monitoring/cancelling the streaming operation.</returns>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.BeginRequestReliableStream(System.String,System.String,System.IO.Stream,Badumna.DataTypes.BadumnaId,System.String,System.AsyncCallback,System.Object)">
      <summary>
            Begin an asynchronous request for a remote stream.
            </summary>
      <param name="streamTag">A unique string to differentiate streaming classes.  The handler with the corresponding tag will be invoked on the remote end.</param>
      <param name="streamName">The name of the stream to request from the remote peer</param>
      <param name="destinationStream">The stream that the content of the remote stream should be written to</param>
      <param name="source">A BadumnaId specifying the remote peer to request the stream from</param>
      <param name="userName">The username associated with the request</param>
      <param name="callback">The callback to be invoked when the streaming operation ends</param>
      <param name="callbackState">User state passed to the callback</param>
      <returns>An IStreamController for monitoring/cancelling the streaming operation.</returns>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.BeginRequestReliableStream(System.String,System.String,System.IO.Stream,Badumna.SpatialEntities.IReplicableEntity,System.String,System.AsyncCallback,System.Object)">
      <summary>
            Begin an asynchronous request for a remote stream.
            </summary>
      <param name="streamTag">A unique string to differentiate streaming classes.  The handler with the corresponding tag will be invoked on the remote end.</param>
      <param name="streamName">The name of the stream to request from the remote peer</param>
      <param name="destinationStream">The stream that the content of the remote stream should be written to</param>
      <param name="replica">A replica from the remote peer to request the file from</param>
      <param name="userName">The username associated with the request</param>
      <param name="callback">The callback to be invoked when the streaming operation ends</param>
      <param name="callbackState">User state passed to the callback</param>
      <returns>An IStreamController for monitoring/cancelling the streaming operation.</returns>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.BeginSendReliableFile(System.String,System.String,Badumna.DataTypes.BadumnaId,System.String,System.AsyncCallback,System.Object)">
      <summary>
            Begin an asynchronous transfer of a file.
            </summary>
      <param name="streamTag">A unique string to differentiate streaming classes.  The handler with the corresponding tag will be invoked on the remote end.</param>
      <param name="fullPath">The path to the file to be sent.  The filename part of this path will be sent to the remote end as an identifier.</param>
      <param name="destination">A BadumnaId specifying the destination peer</param>
      <param name="userName">The username associated with the send request</param>
      <param name="callback">The callback to be invoked when the streaming operation ends</param>
      <param name="callbackState">User state passed to the callback</param>
      <returns>An IStreamController for monitoring/cancelling the streaming operation.</returns>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.BeginSendReliableFile(System.String,System.String,Badumna.SpatialEntities.IReplicableEntity,System.String,System.AsyncCallback,System.Object)">
      <summary>
            Begin an asynchronous transfer of a file.
            </summary>
      <param name="streamTag">A unique string to differentiate streaming classes.  The handler with the corresponding tag will be invoked on the remote end.</param>
      <param name="fullPath">The path to the file to be sent.  The filename part of this path will be sent to the remote end as an identifier.</param>
      <param name="replica">A replica from the destination peer</param>
      <param name="userName">The username associated with the send request</param>
      <param name="callback">The callback to be invoked when the streaming operation ends</param>
      <param name="callbackState">User state passed to the callback</param>
      <returns>An IStreamController for monitoring/cancelling the streaming operation.</returns>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.BeginSendReliableStream(System.String,System.String,System.IO.Stream,Badumna.DataTypes.BadumnaId,System.String,System.AsyncCallback,System.Object)">
      <summary>
            Begin an asynchronous transfer of a stream.
            </summary>
      <param name="streamTag">A unique string to differentiate streaming classes.  The handler with the corresponding tag will be invoked on the remote end.</param>
      <param name="streamName">An identifying name for the stream</param>
      <param name="stream">The stream to be sent</param>
      <param name="destination">A BadumnaId specifying the destination peer</param>
      <param name="userName">The username associated with the send request</param>
      <param name="callback">The callback to be invoked when the streaming operation ends</param>
      <param name="callbackState">User state passed to the callback</param>
      <returns>An IStreamController for monitoring/cancelling the streaming operation.</returns>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.BeginSendReliableStream(System.String,System.String,System.IO.Stream,Badumna.SpatialEntities.IReplicableEntity,System.String,System.AsyncCallback,System.Object)">
      <summary>
            Begin an asynchronous transfer of a stream.
            </summary>
      <param name="streamTag">A unique string to differentiate streaming classes.  The handler with the corresponding tag will be invoked on the remote end.</param>
      <param name="streamName">An identifying name for the stream</param>
      <param name="stream">The stream to be sent</param>
      <param name="replica">A replica from the destination peer</param>
      <param name="userName">The username associated with the send request</param>
      <param name="callback">The callback to be invoked when the streaming operation ends</param>
      <param name="callbackState">User state passed to the callback</param>
      <returns>An IStreamController for monitoring/cancelling the streaming operation.</returns>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.OnBeginRequestReliableStream(System.String,System.IO.Stream,Badumna.DataTypes.BadumnaId,System.String,System.AsyncCallback,System.Object)">
      <summary>
            Used internally.  Not intended to be overridden by clients.
            </summary>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.OnBeginSendReliableStream(System.String,System.IO.Stream,Badumna.DataTypes.BadumnaId,System.String,System.AsyncCallback,System.Object)">
      <summary>
            Used internally.  Not intended to be overridden by clients.
            </summary>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.SubscribeToReceiveStreamRequests(System.String,System.EventHandler{Badumna.Streaming.ReceiveStreamEventArgs})">
      <summary>
            Subscribe a handler that will be invoked when a remote peer attempts to send a stream to this peer.
            </summary>
      <param name="streamTag">A unique string to differentiate streaming classes.  This must match the streamTag passed to BeginSendReliableStream / BeginSendReliableFile.</param>
      <param name="handler">The handler to be invoked</param>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.SubscribeToSendStreamRequests(System.String,System.EventHandler{Badumna.Streaming.SendStreamEventArgs})">
      <summary>
            Subscribe a handler that will be invoked when a remote peer attempts to request a stream from this peer.
            </summary>
      <param name="streamTag">A unique string to differentiate streaming classes.  This must match the streamTag passed to BeginRequestReliableStream / BeginRequestReliableFile.</param>
      <param name="handler">The handler to be invoked</param>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.TriggerReceiveRequest(Badumna.Streaming.ReceiveStreamEventArgs)">
      <summary>
            Used internally.  Not intended to be overridden by clients.
            </summary>
    </member>
    <member name="M:Badumna.Streaming.StreamingManager.TriggerSendRequest(Badumna.Streaming.SendStreamEventArgs)">
      <summary>
            Used internally.  Not intended to be overridden by clients.
            </summary>
    </member>
    <member name="T:Badumna.Streaming.StreamRequestEventArgs">
      <summary>
            Base class for streaming request events.  Common to both SendStreamEventArgs and ReceiveStreamEventArgs.
            Not intended be used as a base class by client applications.
            </summary>
    </member>
    <member name="M:Badumna.Streaming.StreamRequestEventArgs.AcceptFile(System.String,System.AsyncCallback,System.Object)">
      <summary>
            Accept the request, using a file as the source/destination.
            </summary>
    </member>
    <member name="M:Badumna.Streaming.StreamRequestEventArgs.AcceptStream(System.IO.Stream,System.AsyncCallback,System.Object)">
      <summary>
            Accept the request, using a stream as the source/destionation.
            </summary>
    </member>
    <member name="P:Badumna.Streaming.StreamRequestEventArgs.AdditionalData">
      <summary>
            Additional application data attached to the transfer request.
            </summary>
    </member>
    <member name="P:Badumna.Streaming.StreamRequestEventArgs.IsAccepted">
      <summary>
            Indicates whether this transfer request has been accepted.
            </summary>
    </member>
    <member name="F:Badumna.Streaming.StreamRequestEventArgs.mIsAccepted">
      <summary>
            Used internally.
            </summary>
    </member>
    <member name="M:Badumna.Streaming.StreamRequestEventArgs.Reject">
      <summary>
            Reject request to transfer the file to this machine.
            </summary>
    </member>
    <member name="P:Badumna.Streaming.StreamRequestEventArgs.SizeKiloBytes">
      <summary>
            Size of the transfer if available.
            </summary>
    </member>
    <member name="P:Badumna.Streaming.StreamRequestEventArgs.StreamName">
      <summary>
            A human readable name for the transfer.
            </summary>
    </member>
    <member name="P:Badumna.Streaming.StreamRequestEventArgs.StreamTag">
      <summary>
            An application specified tag used to select the handler for the stream.
            </summary>
    </member>
    <member name="P:Badumna.Streaming.StreamRequestEventArgs.UserName">
      <summary>
            The username of the stream sender.
            </summary>
    </member>
    <member name="T:Badumna.Streaming.StreamState">
      <summary>
            The state of a streaming operation.
            </summary>
    </member>
    <member name="F:Badumna.Streaming.StreamState.Waiting">
      <summary>
            A streaming request has been created, but streaming of the data has not yet begun.
            </summary>
    </member>
    <member name="F:Badumna.Streaming.StreamState.InProgress">
      <summary>
            Data is currently being streamed.
            </summary>
    </member>
    <member name="F:Badumna.Streaming.StreamState.Complete">
      <summary>
            Streaming has finished successfully.
            </summary>
    </member>
    <member name="F:Badumna.Streaming.StreamState.Canceled">
      <summary>
            Streaming was canceled by the user.
            </summary>
    </member>
    <member name="F:Badumna.Streaming.StreamState.Error">
      <summary>
            Streaming failed due to an unknown error.
            </summary>
    </member>
    <member name="F:Badumna.Streaming.StreamState.Disconnected">
      <summary>
            The streaming connection was lost.
            </summary>
    </member>
    <member name="T:Badumna.Transport.ApplicationProtocolNode">
      <summary>
            An indexable protocol node. 
            </summary>
    </member>
    <member name="M:Badumna.Transport.ApplicationProtocolNode.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Transport.ApplicationProtocolNode" /> class</summary>
    </member>
    <member name="P:Badumna.Transport.ApplicationProtocolNode.Id">
      <summary>
            The identifier of this resource.
            </summary>
    </member>
    <member name="T:Badumna.Transport.PortForwardingResult">
      <summary>
            The result of the port forwarding operation. 
            </summary>
    </member>
    <member name="M:Badumna.Transport.PortForwardingResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Transport.PortForwardingResult" /> class</summary>
    </member>
    <member name="P:Badumna.Transport.PortForwardingResult.ExternalPort">
      <summary>
            Gets a value indicating the mapped external port.
            </summary>
    </member>
    <member name="P:Badumna.Transport.PortForwardingResult.InternalPort">
      <summary>
            Gets a valud indicating the mapped internal port.
            </summary>
    </member>
    <member name="P:Badumna.Transport.PortForwardingResult.LeaseInSeconds">
      <summary>
            Gets a valud indicating the lease duration in seconds.
            </summary>
    </member>
    <member name="P:Badumna.Transport.PortForwardingResult.Succeed">
      <summary>
            Gets a value indicating whether succeed flag.
            </summary>
    </member>
    <member name="T:Badumna.Transport.Upnp.BadumnaUPnPPortForwarder">
      <summary>
            The UPnP port forwarder used for configuring port forwarding on UPnP devinces.  
            </summary>
    </member>
    <member name="M:Badumna.Transport.Upnp.BadumnaUPnPPortForwarder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Transport.Upnp.BadumnaUPnPPortForwarder" /> class.
            </summary>
    </member>
    <member name="M:Badumna.Transport.Upnp.BadumnaUPnPPortForwarder.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Badumna.Transport.Upnp.BadumnaUPnPPortForwarder.GetExternalAddress">
      <summary>
            Gets the external address.
            </summary>
      <returns>The external address or null on error.</returns>
    </member>
    <member name="M:Badumna.Transport.Upnp.BadumnaUPnPPortForwarder.Initialize(System.Net.IPAddress)">
      <summary>
            Initializes the port forwarder.
            </summary>
      <param name="localAddress">The local peer address.</param>
      <returns>
            Whether the initialization succeeded or not.
            </returns>
    </member>
    <member name="M:Badumna.Transport.Upnp.BadumnaUPnPPortForwarder.TryMapPort(System.Net.IPEndPoint,System.TimeSpan)">
      <summary>
            Tries to map the ports.
            </summary>
      <param name="localAddress">The local address.</param>
      <param name="mappingLease">The mapping lease.</param>
      <returns>Port forwarding result object.</returns>
    </member>
    <member name="T:Badumna.Transport.Upnp.UpnpPortForwarder">
      <summary>
            The UPnP port forwarder is used to configure port forwarding on UPnP devinces. Each port forwarder manages exact
            one forwarded port. That means if the application process needs two different ports be mapped to two different
            external ports, then two UPnP port forwarders should be created to let them each manage one port mapping. The 
            mapped port is created with a lease duration set by the application, it is application code's responsibility to
            keep renewing the mapped port before the expiration time. The mapped port will be removed from the UPnP devices
            when the port forwarder is disposed. 
            </summary>
    </member>
    <member name="M:Badumna.Transport.Upnp.UpnpPortForwarder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Transport.Upnp.UpnpPortForwarder" /> class.
            </summary>
    </member>
    <member name="M:Badumna.Transport.Upnp.UpnpPortForwarder.Dispose">
      <summary>
            Performs application-defined tasks to free all allocated resources, removing the mapped port in this case.
            </summary>
    </member>
    <member name="M:Badumna.Transport.Upnp.UpnpPortForwarder.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Badumna.Transport.Upnp.UpnpPortForwarder.GetExternalAddress">
      <summary>
            Gets the external address from the router.
            </summary>
      <returns>The external IP address or null on error.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this method is called on an uninitialized port forwarder object.
            </exception>
    </member>
    <member name="M:Badumna.Transport.Upnp.UpnpPortForwarder.Initialize(System.Net.IPAddress)">
      <summary>
            Initializes the port forwarder. During the initialization, the port forwarder uses the SSDP protocol to 
            locate the UPnP devices.  
            </summary>
      <param name="localAddress">The local peer address.</param>
      <returns>Whether the initialization succeeded or not.</returns>
    </member>
    <member name="T:Badumna.Utilities.AndroidLog">
      <summary>
            Logger for Android platform that uses the Android.Util.Log static class to generate messages that
            can be read via the Android Device Console view in Visual Studio.
            NOTE that this uses reflection to find the log type and to store logging methods. this is not ideal
            for two reasons:
            1. It is not type safe or future proof.
            2. All platforms have this code in them.
            An alternative is for Badumna to use an interface to a logger, and the application bootstrapper gave it the logger
            instance at run time. This is currently not possible because the base Log class is private and does
            not implement a publicly visible interface.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.AndroidLog.Trace(Badumna.LogLevel,Badumna.LogTag,System.String)">
      <summary>
            Record a log message.
            </summary>
      <param name="level">The level of the message</param>
      <param name="tags">The tags for the message</param>
      <param name="output">The text of the message</param>
    </member>
    <member name="T:Badumna.Utilities.BooleanArray">
      <summary>
            An automatically sized array of booleans.  Supports a default value for
            elements which are not explicitly set.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.BooleanArray.#ctor">
      <summary>
            Construct a new BooleanArray with all elements initialized to false.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.BooleanArray.#ctor(Badumna.Utilities.BooleanArray)">
      <summary>
            Construct a copy of a BooleanArray.
            </summary>
      <param name="other">The BooleanArray to copy</param>
    </member>
    <member name="M:Badumna.Utilities.BooleanArray.#ctor(System.Boolean)">
      <summary>
            Construct a new BooleanArray with all elements initialized to the given initialValue.
            </summary>
      <param name="initialValue">The value to initialize elements with.</param>
    </member>
    <member name="M:Badumna.Utilities.BooleanArray.#ctor(System.Int32[])">
      <summary>
            Construct a new BooleanArray with the specified indexes set to true, with the remaining
            elements set to false.
            </summary>
      <param name="indexesSetToTrue" />
    </member>
    <member name="M:Badumna.Utilities.BooleanArray.Any">
      <summary>
            Returns true if any element of the array is true, false otherwise.
            </summary>
      <returns />
    </member>
    <member name="M:Badumna.Utilities.BooleanArray.Equals(Badumna.Utilities.BooleanArray)">
      <summary>
            Returns true if other stores the same elements as this instance, false otherwise.
            </summary>
      <param name="other">The BooleanArray to check for equality with this BooleanArray</param>
    </member>
    <member name="M:Badumna.Utilities.BooleanArray.Equals(System.Object)">
      <summary>
            Returns true if obj is a BooleanArray and stores the same elements as this instance, false otherwise.
            </summary>
      <param name="obj">The object to check for equality with this BooleanArray</param>
    </member>
    <member name="M:Badumna.Utilities.BooleanArray.GetHashCode">
      <summary>
            Gets the hash code for the instance.
            </summary>
    </member>
    <member name="P:Badumna.Utilities.BooleanArray.HighestUsedIndex">
      <summary>
            The highest index actually referenced (directly or indirectly, e.g. via an Or).  A
            value less than 0 indicates that no index has been referenced yet.
            </summary>
    </member>
    <member name="P:Badumna.Utilities.BooleanArray.Item(System.Int32)">
      <summary>
            Get or set the element at the specified index.
            </summary>
    </member>
    <member name="F:Badumna.Utilities.BooleanArray.MaxIndex">
      <summary>
            The maximum usable index (inclusive).  e.g. Accessing this[MaxIndex + 1] will
            throw an ArgumentOfOfRangeException, accessing this[MaxIndex] will succeed.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.BooleanArray.Or(Badumna.Utilities.BooleanArray)">
      <summary>
            Performs an elementwise logical or with a BooleanArray, storing the result in this
            BooleanArray.
            </summary>
      <param name="other">The BooleanArray to 'or' with.</param>
    </member>
    <member name="M:Badumna.Utilities.BooleanArray.SetAll(System.Boolean)">
      <summary>
            Set all elements of the BooleanArray to the specified value.
            </summary>
      <param name="value">The value to set the elements of the BooleanArray to.</param>
    </member>
    <member name="M:Badumna.Utilities.BooleanArray.ToString">
      <summary>
            Returns a string representing the contents of the instance.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.BooleanArray.TryParse(System.String)">
      <summary>
            Attempts to construct a BooleanArray initialized according to the 
            given string.  The string should be in the same format as returned
            by ToString().
            </summary>
      <param name="bits">The string to parse</param>
      <returns>A BooleanArray initialize according to bits, or null if the
            string could not be parsed.</returns>
    </member>
    <member name="T:Badumna.Utilities.ConsoleLog">
      <summary>
            Logs to the console.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.ConsoleLog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Utilities.ConsoleLog" /> class</summary>
    </member>
    <member name="M:Badumna.Utilities.ConsoleLog.Trace(Badumna.LogLevel,Badumna.LogTag,System.String)">
      <summary>
            Record a log message.
            </summary>
      <param name="level">The level of the message</param>
      <param name="tags">The tags for the message</param>
      <param name="output">The text of the message</param>
    </member>
    <member name="T:Badumna.Utilities.ConsoleWriter">
      <summary>
            Console writer that writes to the console.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.ConsoleWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Utilities.ConsoleWriter" /> class</summary>
    </member>
    <member name="E:Badumna.Utilities.ConsoleWriter.CancelKeyPress">
      <summary>
            Occurs when the System.ConsoleModifiers.Control modifier key (CTRL) and System.ConsoleKey.C
            console key (C) are pressed simultaneously (CTRL+C).
            </summary>
    </member>
    <member name="P:Badumna.Utilities.ConsoleWriter.Out">
      <summary>
            Gets the standard output stream.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.ConsoleWriter.Write(System.String,System.Object[])">
      <summary>
            Writes the text representation of the specified array of objects, followed
            by the current line terminator, to the standard output stream using the specified
            format information.
            </summary>
      <param name="format">A composite format string.</param>
      <param name="args">An array of objects to write using format.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.ArgumentNullException">format or arg is null.</exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.</exception>
    </member>
    <member name="M:Badumna.Utilities.ConsoleWriter.WriteLine(System.String,System.Object[])">
      <summary>
            Writes the text representation of the specified array of objects to the standard
            output stream using the specified format information.
            </summary>
      <param name="format">A composite format string.</param>
      <param name="args">An array of objects to write using format.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.ArgumentNullException">format or arg is null.</exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.</exception>
    </member>
    <member name="T:Badumna.Utilities.DataScrambleScheme">
      <summary>
            A simple scrambling scheme for UDP over UDP. 
            In this scheme, for each non-empty packet, 4 bytes junk data is inserted at the beginning of the payload. The 
            payload is divided into blocks each with DataScrambleScheme.BlockSize bytes (the last block may have less than
            DataScrambleScheme.BlockSize bytes), each of these blocks is then expended with 2 bytes CRC16 checksum. The 
            layout of the scrambled data is shown below:
              -----------------------------------------------------------------------------------------------
              | 4bytes junk | block 0 | 2 bytes crc | block 1 | 2 bytes crc | ..... | block N | 2 bytes crc | 
              -----------------------------------------------------------------------------------------------
            For empty packet which has a 0 byte payload, the packet is unchanged.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.DataScrambleScheme.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Utilities.DataScrambleScheme" /> class</summary>
    </member>
    <member name="M:Badumna.Utilities.DataScrambleScheme.ScrambleUDPData(System.Byte[])">
      <summary>
            Scrambles the UDP data.
            </summary>
      <param name="original">The original data in byte array.</param>
      <returns>Scrambled data.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when original is null.</exception>
    </member>
    <member name="M:Badumna.Utilities.DataScrambleScheme.UnscrambleUDPData(System.Byte[])">
      <summary>
            Unscrambles the UDP data.
            </summary>
      <param name="scrambledData">The scrambled data in byte array.</param>
      <returns>Unscrambled data or null on error.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when scrambledData is null.</exception>
    </member>
    <member name="T:Badumna.Utilities.DelegateLog">
      <summary>
            A logger that passes log messages to delegates.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.DelegateLog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Utilities.DelegateLog" /> class</summary>
    </member>
    <member name="E:Badumna.Utilities.DelegateLog.OnException">
      <summary>
            Invoked when an exception is logged.
            </summary>
    </member>
    <member name="E:Badumna.Utilities.DelegateLog.OnMessage">
      <summary>
            Invoked when a message is logged.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.DelegateLog.Trace(Badumna.LogLevel,Badumna.LogTag,System.String)">
      <summary>
            Record a log message.
            </summary>
      <param name="level">The level of the message</param>
      <param name="tags">The tags for the message</param>
      <param name="output">The text of the message</param>
    </member>
    <member name="M:Badumna.Utilities.DelegateLog.TraceException(Badumna.LogLevel,Badumna.LogTag,System.Exception,System.String)">
      <summary>
            Implementation of trace exception.
            </summary>
      <param name="level">Trace event type.</param>
      <param name="tags">The tags for the exception</param>
      <param name="exception">Exception need to be logged.</param>
      <param name="output">The output message.</param>
    </member>
    <member name="T:Badumna.Utilities.DotNetLog">
      <summary>
            A logger that passes log messages to the .NET Diagnostics.Trace system.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.DotNetLog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Utilities.DotNetLog" /> class</summary>
    </member>
    <member name="M:Badumna.Utilities.DotNetLog.Trace(Badumna.LogLevel,Badumna.LogTag,System.String)">
      <summary>
            Record a log message.
            </summary>
      <param name="level">The level of the message</param>
      <param name="tags">The tags for the message</param>
      <param name="output">The text of the message</param>
    </member>
    <member name="T:Badumna.Utilities.GenericsConstructor">
      <summary>
            This class exists solely to for AOT compilation of required types that would otherwise be missed.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.GenericsConstructor.Construct">
      <summary>
            Force AOT compilation.
            </summary>
    </member>
    <member name="T:Badumna.Utilities.IConsoleWriter">
      <summary>
            Interface for console writer.
            </summary>
    </member>
    <member name="E:Badumna.Utilities.IConsoleWriter.CancelKeyPress">
      <summary>
            Occurs when the System.ConsoleModifiers.Control modifier key (CTRL) and System.ConsoleKey.C
            console key (C) are pressed simultaneously (CTRL+C).
            </summary>
    </member>
    <member name="P:Badumna.Utilities.IConsoleWriter.Out">
      <summary>
            Gets the standard output stream.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.IConsoleWriter.Write(System.String,System.Object[])">
      <summary>
            Writes the text representation of the specified array of objects, followed
            by the current line terminator, to the standard output stream using the specified
            format information.
            </summary>
      <param name="format">A composite format string.</param>
      <param name="args">An array of objects to write using format.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.ArgumentNullException">format or arg is null.</exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.</exception>
    </member>
    <member name="M:Badumna.Utilities.IConsoleWriter.WriteLine(System.String,System.Object[])">
      <summary>
            Writes the text representation of the specified array of objects to the standard
            output stream using the specified format information.
            </summary>
      <param name="format">A composite format string.</param>
      <param name="args">An array of objects to write using format.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.ArgumentNullException">format or arg is null.</exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.</exception>
    </member>
    <member name="T:Badumna.Utilities.IStatistics">
      <summary>
            Used for collection of network statistics
            </summary>
    </member>
    <member name="M:Badumna.Utilities.IStatistics.Record(System.String,System.String,System.Double)">
      <summary>
            Recore a specific statistic
            </summary>
      <param name="group" />
      <param name="name" />
      <param name="value" />
    </member>
    <member name="T:Badumna.Utilities.Log">
      <summary>
            A class that can be specialized to send log messages to a desired location.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.Log.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Utilities.Log" /> class</summary>
    </member>
    <member name="M:Badumna.Utilities.Log.Trace(Badumna.LogLevel,Badumna.LogTag,System.String)">
      <summary>
            Record a log message.
            </summary>
      <param name="level">The level of the message</param>
      <param name="tags">The tags for the message</param>
      <param name="output">The text of the message</param>
    </member>
    <member name="M:Badumna.Utilities.Log.TraceException(Badumna.LogLevel,Badumna.LogTag,System.Exception,System.String)">
      <summary>
            Implementation of trace exception.
            </summary>
      <param name="level">Trace event type.</param>
      <param name="tags">The tags for the exception</param>
      <param name="exception">Exception need to be logged.</param>
      <param name="output">The output message.</param>
    </member>
    <member name="T:Badumna.Utilities.Log4NetLog">
      <summary>
            Document this class
            </summary>
    </member>
    <member name="M:Badumna.Utilities.Log4NetLog.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Utilities.Log4NetLog" /> class.
            </summary>
      <param name="configString">The config.</param>
    </member>
    <member name="M:Badumna.Utilities.Log4NetLog.Trace(Badumna.LogLevel,Badumna.LogTag,System.String)">
      <summary>
            Record a log message.
            </summary>
      <param name="level">The level of the message</param>
      <param name="tags">The tags for the message</param>
      <param name="output">The text of the message</param>
    </member>
    <member name="M:Badumna.Utilities.Log4NetLog.TraceException(Badumna.LogLevel,Badumna.LogTag,System.Exception,System.String)">
      <summary>
            Implementation of trace exception.
            </summary>
      <param name="level">Trace event type.</param>
      <param name="tags">The tags for the exception</param>
      <param name="exception">Exception need to be logged.</param>
      <param name="output">The output message.</param>
    </member>
    <member name="T:Badumna.Utilities.Logger">
      <summary>
            The logging system.
            </summary>
    </member>
    <member name="P:Badumna.Utilities.Logger.ExcludeTags">
      <summary>
            Gets or sets the excluded tags.  If any of these are set in the message, it will be dropped.
            </summary>
    </member>
    <member name="P:Badumna.Utilities.Logger.IncludeTags">
      <summary>
            Gets or sets the included tags.  If any of these are set in the message, it will be logged (unless excluded).
            </summary>
    </member>
    <member name="P:Badumna.Utilities.Logger.Level">
      <summary>
            Gets or sets the logging level.
            </summary>
    </member>
    <member name="P:Badumna.Utilities.Logger.Log">
      <summary>
            Gets or sets the current log.
            </summary>
    </member>
    <member name="P:Badumna.Utilities.Logger.LogTimestamp">
      <summary>
            Gets or sets a value indicating whether to add a timestamp to the logged messages.
            </summary>
    </member>
    <member name="T:Badumna.Utilities.StatisticsTracker">
      <summary>
            Regularly sends packets to a server to estimate usage statistics.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.StatisticsTracker.SetPayload(System.String)">
      <summary>
            Sets the payload string in the data packet.
            </summary>
      <param name="payload">The new payload.</param>
    </member>
    <member name="M:Badumna.Utilities.StatisticsTracker.SetUserID(System.Int64)">
      <summary>
            Sets the user ID in the data packet.
            </summary>
      <param name="userId">The new user ID.</param>
    </member>
    <member name="M:Badumna.Utilities.StatisticsTracker.Start">
      <summary>
            Starts the tracker.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.StatisticsTracker.Stop">
      <summary>
            Stops the tracker.
            </summary>
    </member>
    <member name="T:Badumna.Utilities.TraceException">
      <summary>
            Signature for delegates called to log an exception.
            </summary>
      <param name="level">The level of the exception</param>
      <param name="tags">The tags for the exception</param>
      <param name="exception">The exception object</param>
      <param name="message">The text describing the exception</param>
    </member>
    <member name="T:Badumna.Utilities.TraceMessage">
      <summary>
            Signature for delegates called to log a message.
            </summary>
      <param name="level">The level of the message</param>
      <param name="tags">The tags for the message</param>
      <param name="message">The text of the message</param>
    </member>
    <member name="T:Badumna.Utilities.UnityLog">
      <summary>
            UnityTraceLogger class is used to pass the trace message from Badumna to 
            Unity log file.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.UnityLog.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Badumna.Utilities.UnityLog" /> class.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.UnityLog.Trace(Badumna.LogLevel,Badumna.LogTag,System.String)">
      <summary>
            Record a log message.
            </summary>
      <param name="level">The level of the message</param>
      <param name="tags">The tags for the message</param>
      <param name="output">The text of the message</param>
    </member>
    <member name="T:Badumna.Utilities.Logging.FileLog">
      <summary>
            Sends log messages to a file.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.Logging.FileLog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Utilities.Logging.FileLog" /> class</summary>
    </member>
    <member name="P:Badumna.Utilities.Logging.FileLog.Filename">
      <summary>
            Gets or sets the log filename.
            </summary>
    </member>
    <member name="M:Badumna.Utilities.Logging.FileLog.Trace(Badumna.LogLevel,Badumna.LogTag,System.String)">
      <summary>
            Record a log message.
            </summary>
      <param name="level">The level of the message</param>
      <param name="tags">The tags for the message</param>
      <param name="output">The text of the message</param>
    </member>
    <member name="T:Badumna.Validation.AllocationDecisionMethod">
      <summary>
            Delegate for deciding whether to accept a validator allocation request.
            </summary>
      <returns>
        <c>true</c> if the peer is willing to be a validator for the requestor, otherwise
            <c>false</c>.</returns>
    </member>
    <member name="T:Badumna.Validation.CreateValidatedEntity">
      <summary>
            Delegate for creating validated entities on validators.
            </summary>
      <param name="entityType">An integer indicating the type of entity to create.</param>
      <returns>A new validated entity.</returns>
    </member>
    <member name="T:Badumna.Validation.EntityStatus">
      <summary>
            Status of the validated entity.
            </summary>
    </member>
    <member name="F:Badumna.Validation.EntityStatus.Paused">
      <summary>
            The entity cannot be updated, as it has no validator.
            </summary>
    </member>
    <member name="F:Badumna.Validation.EntityStatus.Validating">
      <summary>
            The entity has a live validator.
            </summary>
    </member>
    <member name="F:Badumna.Validation.EntityStatus.Transitioning">
      <summary>
            The entity is transitioning.
            </summary>
    </member>
    <member name="T:Badumna.Validation.IFacade">
      <summary>
            Interface for Validation Facade.
            </summary>
    </member>
    <member name="M:Badumna.Validation.IFacade.ConfigureValidator(Badumna.Validation.AllocationDecisionMethod,Badumna.Validation.CreateValidatedEntity,Badumna.Validation.RemoveValidatedEntity)">
      <summary>
            Configure the peer as a validator.
            </summary>
      <param name="allocationDecisionMethod">A method for deciding availability as a validator.</param>
      <param name="validatedEntityFactoryMethod">A factory method for creating validated entities.</param>
      <param name="onValidatedEntityRemoval">A callback for handling validator removal.</param>
    </member>
    <member name="M:Badumna.Validation.IFacade.RegisterEntityWithScene(Badumna.Validation.IValidatedEntity,Badumna.SpatialEntities.NetworkScene)">
      <summary>
            Register a validated entity with a scene.
            </summary>
      <param name="entity">The entity.</param>
      <param name="scene">The scene to register the entity with.</param>
      <exception cref="T:System.ArgumentException">Thrown when the entity is not registered.</exception>
    </member>
    <member name="M:Badumna.Validation.IFacade.RegisterValidatedEntity(Badumna.Validation.IValidatedEntity,System.UInt32)">
      <summary>
            Register a validated entity.
            </summary>
      <param name="entity">The entity.</param>
      <param name="entityType">An integer representing the type of the entity.</param>
      <exception cref="T:System.ArgumentException">Thrown when the entity is already registered.</exception>
    </member>
    <member name="M:Badumna.Validation.IFacade.RegisterValidatedEntity(Badumna.Validation.IValidatedEntity,System.UInt32,Badumna.Validation.ISerializedEntityState)">
      <summary>
            Register a validated entity with a specified intial state.
            </summary>
      <param name="entity">The entity.</param>
      <param name="entityType">An integer representing the type of the entity.</param>
      <param name="initialState">The serialized initial state.</param>
      <exception cref="T:System.ArgumentException">Thrown when an entity is already registered with the given ID.</exception>
    </member>
    <member name="M:Badumna.Validation.IFacade.Shutdown">
      <summary>
            Cease any ongoing validation (client or server) and shutdown.
            </summary>
    </member>
    <member name="P:Badumna.Validation.IFacade.TimeoutCalculationMethod">
      <summary>
            Sets a delegate for calculating validator timeouts.
            </summary>
    </member>
    <member name="M:Badumna.Validation.IFacade.UnregisterEntityFromScene(Badumna.Validation.IValidatedEntity)">
      <summary>
            Unregister a validated entity from a scene.
            </summary>
      <param name="entity">The entity.</param>
      <exception cref="T:System.ArgumentException">Thrown when the entity is not registered.</exception>
    </member>
    <member name="M:Badumna.Validation.IFacade.UnregisterValidatedEntity(Badumna.Validation.IValidatedEntity)">
      <summary>
            Unregister a validated entity.
            </summary>
      <param name="entity">The entity.</param>
      <exception cref="T:System.ArgumentException">Thrown when the entity is not registered.</exception>
    </member>
    <member name="M:Badumna.Validation.IFacade.UpdateEntity(Badumna.Validation.IValidatedEntity,System.TimeSpan,System.Byte[])">
      <summary>
            Specify the interval and user input to be used for the next update of a given entity.
            </summary>
      <param name="entity">The entity.</param>
      <param name="interval">The time interval for the update.</param>
      <param name="userInput">The user input, serialized to a byte array.</param>
      <exception cref="T:System.ArgumentException">Thrown when no entity is registered with the given ID.</exception>
    </member>
    <member name="E:Badumna.Validation.IFacade.ValidationFailed">
      <summary>
            Triggered when validation is unable to proceed.
            </summary>
    </member>
    <member name="E:Badumna.Validation.IFacade.ValidatorOnline">
      <summary>
            Triggered when a validator comes online.
            </summary>
    </member>
    <member name="T:Badumna.Validation.ISerializedEntityState">
      <summary>
            Interface for object storing entity state.
            </summary>
    </member>
    <member name="P:Badumna.Validation.ISerializedEntityState.Data">
      <summary>
            Gets a byte array containing serialized property values.
            </summary>
    </member>
    <member name="P:Badumna.Validation.ISerializedEntityState.Flags">
      <summary>
            Gets a set of flags indicating which properties' values are included in this instance.
            </summary>
    </member>
    <member name="T:Badumna.Validation.IUserInput">
      <summary>
            Interface for classes storing user input.
            </summary>
    </member>
    <member name="M:Badumna.Validation.IUserInput.ToBytes">
      <summary>
            Deserialize the user input from a byte array.
            </summary>
      <returns>A byte array containing serialized user input.</returns>
    </member>
    <member name="T:Badumna.Validation.IValidatedEntity">
      <summary>
            Interface for validated entities.
            </summary>
    </member>
    <member name="M:Badumna.Validation.IValidatedEntity.CreateUpdate">
      <summary>
            Create an update consisting of the state change since last update was created.
            </summary>
      <returns>A state update.</returns>
    </member>
    <member name="M:Badumna.Validation.IValidatedEntity.MergeStateUpdates(Badumna.Validation.ISerializedEntityState,Badumna.Validation.ISerializedEntityState)">
      <summary>
            Merge two states by by partially or completely overwriting one with another.
            </summary>
      <param name="current">The baseline state.</param>
      <param name="update">The new state to apply.</param>
      <returns>A new state representing the merging of the two states.</returns>
    </member>
    <member name="M:Badumna.Validation.IValidatedEntity.RestoreState(Badumna.Validation.ISerializedEntityState)">
      <summary>
            Restore the entity's replicable state from a stored state.
            </summary>
      <param name="state">The new state for the entity.</param>
    </member>
    <member name="M:Badumna.Validation.IValidatedEntity.SaveState">
      <summary>
            Save the object's replicable state.
            </summary>
      <returns>A memento of the entity's replicable state.</returns>
    </member>
    <member name="P:Badumna.Validation.IValidatedEntity.Status">
      <summary>
            Gets or sets the status of the validated entity.
            </summary>
    </member>
    <member name="M:Badumna.Validation.IValidatedEntity.Update(System.TimeSpan,System.Byte[],Badumna.Validation.UpdateMode)">
      <summary>
            Update the entity state according to the game logic.
            </summary>
      <param name="timeInterval">The time interval since last update.</param>
      <param name="input">User input serialized as a byte array.</param>
      <param name="mode">The update mode (autoritative update,
            synchronisation, or prediction).</param>
    </member>
    <member name="T:Badumna.Validation.RemoveValidatedEntity">
      <summary>
            Delegate for removing validated entities on validators.
            </summary>
      <param name="entity">The entity to remove.</param>
    </member>
    <member name="T:Badumna.Validation.UpdateMode">
      <summary>
            Modes of updating a validated entity.
            </summary>
    </member>
    <member name="F:Badumna.Validation.UpdateMode.Authoritative">
      <summary>
            The update is being performed by an authorised validator to give the authoritative state
            of the entity.
            </summary>
    </member>
    <member name="F:Badumna.Validation.UpdateMode.Synchronisation">
      <summary>
            The update is being performed to synchronise a predicted state with the latest known
            authoritative state.
            </summary>
    </member>
    <member name="F:Badumna.Validation.UpdateMode.Prediction">
      <summary>
            The update is being performed for client-side prediction.
            </summary>
    </member>
    <member name="T:Badumna.Validation.ValidatedEntity">
      <summary>
            Base class automagically implementing most of IValidatedEntity interface.
            </summary>
    </member>
    <member name="M:Badumna.Validation.ValidatedEntity.#ctor(Badumna.INetworkFacade)">
      <summary>
            Initializes a new instance of the ValidatedEntity class.
            </summary>
      <param name="networkFacade">The network facade.</param>
    </member>
    <member name="P:Badumna.Validation.ValidatedEntity.AreaOfInterestRadius">
      <summary>
            Gets or sets the radius of the entity's sphere of interest.
            </summary>
    </member>
    <member name="M:Badumna.Validation.ValidatedEntity.CreateUpdate">
      <summary>
            Create an update consisting of the state change since last update was created.
            </summary>
      <returns>A state update.</returns>
    </member>
    <member name="M:Badumna.Validation.ValidatedEntity.Deserialize(Badumna.Utilities.BooleanArray,System.IO.Stream,System.Int32)">
      <summary>
            Deserialize the spatial entity state from the given stream.
            </summary>
      <param name="includedParts">List of parts included in the serialization.</param>
      <param name="stream">Memory stream containing the serialized data.</param>
      <param name="estimatedMillisecondsSinceDeparture">Estimated time since serialization.</param>
    </member>
    <member name="P:Badumna.Validation.ValidatedEntity.Guid">
      <summary>
            Gets or sets a network wide identifier for the entity.
            </summary>
    </member>
    <member name="M:Badumna.Validation.ValidatedEntity.HandleEvent(System.IO.Stream)">
      <summary>
            Process an event sent to this entity by a call to, e.g.,
            NetworkFacade.SendCustomMessageToRemoteCopies().
            </summary>
      <param name="stream">A stream containing the serialized event data</param>
    </member>
    <member name="M:Badumna.Validation.ValidatedEntity.MergeStateUpdates(Badumna.Validation.ISerializedEntityState,Badumna.Validation.ISerializedEntityState)">
      <summary>
            Merge two states by by partially or completely overwriting one with another.
            </summary>
      <param name="current">The baseline state.</param>
      <param name="update">The new state to apply.</param>
      <returns>A new state representing the merging of the two states.</returns>
    </member>
    <member name="F:Badumna.Validation.ValidatedEntity.NetworkFacade">
      <summary>
            The network facade.
            </summary>
    </member>
    <member name="P:Badumna.Validation.ValidatedEntity.Position">
      <summary>
            Gets or sets the centroid of the entity.
            </summary>
    </member>
    <member name="P:Badumna.Validation.ValidatedEntity.Radius">
      <summary>
            Gets or sets the radius of the entity's bounding sphere.
            </summary>
    </member>
    <member name="M:Badumna.Validation.ValidatedEntity.RestoreState(Badumna.Validation.ISerializedEntityState)">
      <summary>
            Restore the entity's replicable state from a stored state.
            </summary>
      <param name="state">The new state for the entity.</param>
    </member>
    <member name="M:Badumna.Validation.ValidatedEntity.SaveState">
      <summary>
            Save the object's replicable state.
            </summary>
      <returns>A memento of the entity's replicable state.</returns>
    </member>
    <member name="M:Badumna.Validation.ValidatedEntity.Serialize(Badumna.Utilities.BooleanArray,System.IO.Stream)">
      <summary>
            Serialize the requiredParts of the entity on to the stream.
            </summary>
      <param name="requiredParts">Indicates which parts should be serialized.  Exactly these parts must be written to the stream.</param>
      <param name="stream">The stream to serialize to.  This stream should not be closed.</param>
    </member>
    <member name="P:Badumna.Validation.ValidatedEntity.Status">
      <summary>
            Gets or sets the status of the validated entity.
            </summary>
    </member>
    <member name="M:Badumna.Validation.ValidatedEntity.Update(System.TimeSpan,System.Byte[],Badumna.Validation.UpdateMode)">
      <summary>
            Update the entity state according to the game logic.
            </summary>
      <param name="timeInterval">The time interval since last update.</param>
      <param name="input">User input serialized as a byte array.</param>
      <param name="mode">The update mode (autoritative update,
            synchronisation, or prediction).</param>
    </member>
    <member name="T:Badumna.Validation.ValidationException">
      <summary>
            Thrown to indicate an internal error during validation.
            </summary>
    </member>
    <member name="M:Badumna.Validation.ValidationException.#ctor">
      <summary>
            Initializes a new instance of the ValidationException class.
            </summary>
    </member>
    <member name="M:Badumna.Validation.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the ValidationException class with serialized data.
            </summary>
      <param name="serializationInfo">The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
      <param name="streamingContext">The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.</param>
    </member>
    <member name="M:Badumna.Validation.ValidationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the ValidationException class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:Badumna.Validation.ValidationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the ValidationException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
    </member>
    <member name="T:Badumna.Validation.ValidationFailureEventArgs">
      <summary>
            Event arguments for validation failure events.
            </summary>
    </member>
    <member name="M:Badumna.Validation.ValidationFailureEventArgs.#ctor(Badumna.Validation.ValidationFailureReason)">
      <summary>
            Initializes a new instance of the ValidationFailureEventArgs class.
            </summary>
      <param name="reason">The reason for the validation failure.</param>
    </member>
    <member name="P:Badumna.Validation.ValidationFailureEventArgs.Reason">
      <summary>
            Gets the reason for the validation failure.
            </summary>
    </member>
    <member name="T:Badumna.Validation.ValidationFailureReason">
      <summary>
            Enumeration of possible validation failure reasons.
            </summary>
    </member>
    <member name="F:Badumna.Validation.ValidationFailureReason.ServerUnreachable">
      <summary>
            It is not possible to contact the master server.
            </summary>
    </member>
    <member name="F:Badumna.Validation.ValidationFailureReason.NoHostAvailable">
      <summary>
            No host was available to perform validation.
            </summary>
    </member>
    <member name="T:Badumna.Validation.ValidatorOnlineEventArgs">
      <summary>
            Event arguments for validation going live events.
            </summary>
    </member>
    <member name="M:Badumna.Validation.ValidatorOnlineEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Badumna.Validation.ValidatorOnlineEventArgs" /> class</summary>
    </member>
    <member name="T:Badumna.Validation.ValidatorTimeoutCalculationMethod">
      <summary>
            Delegate for calculating validator timeouts as a function of statistics about validator message arrival.
            </summary>
      <param name="messageIntervalMillisecondsMean">The mean interval between validator messages.</param>
      <param name="messageIntervalMillisecondsStdDev">The standard deviation of the intervals between messages.</param>
      <param name="sessionDurationMilliseconds">The duration of the validator session.</param>
      <param name="messageCount">The number of messages received from the validator.</param>
      <returns>The number of milliseconds without a message from the validator before it is timed out.</returns>
    </member>
  </members>
</doc>